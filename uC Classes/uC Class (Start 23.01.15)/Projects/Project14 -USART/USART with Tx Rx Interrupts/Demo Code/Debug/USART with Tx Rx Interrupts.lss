
USART with Tx Rx Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000152  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800074  00800074  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042a  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ca  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029d  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000470  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	26 c0       	rjmp	.+76     	; 0x64 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	32 c0       	rjmp	.+100    	; 0x80 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e5       	ldi	r30, 0x52	; 82
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 37       	cpi	r26, 0x75	; 117
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	79 c0       	rjmp	.+242    	; 0x14e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

char i = 0;

int main(void)
{
	USART_Init();
  5e:	6b d0       	rcall	.+214    	; 0x136 <USART_Init>
	sei();
  60:	78 94       	sei
  62:	ff cf       	rjmp	.-2      	; 0x62 <main+0x4>

00000064 <__vector_11>:

//***************************************
//     USART, Rx Complete vector
//***************************************
ISR(USART_RXC_vect) 
{
  64:	1f 92       	push	r1
  66:	0f 92       	push	r0
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	0f 92       	push	r0
  6c:	11 24       	eor	r1, r1
  6e:	8f 93       	push	r24
	char receivedData;
	
	receivedData = UDR; //Received byte saved in the variable 'receivedData'
  70:	8c b1       	in	r24, 0x0c	; 12
	
	UDR = receivedData; //'receivedData' loaded to UDR 
  72:	8c b9       	out	0x0c, r24	; 12
}
  74:	8f 91       	pop	r24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <__vector_13>:

//***************************************
//     USART, Tx Complete vector
//***************************************
ISR(USART_TXC_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	5f 93       	push	r21
  92:	6f 93       	push	r22
  94:	7f 93       	push	r23
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	63 97       	sbiw	r28, 0x13	; 19
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61
	const char sampleText[] = "This a sample text";
  b0:	83 e1       	ldi	r24, 0x13	; 19
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_13+0x3a>
	
	UDR = sampleText[i];
  c2:	80 91 74 00 	lds	r24, 0x0074
  c6:	e1 e0       	ldi	r30, 0x01	; 1
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 0f       	add	r30, r28
  cc:	fd 1f       	adc	r31, r29
  ce:	e8 0f       	add	r30, r24
  d0:	f1 1d       	adc	r31, r1
  d2:	80 81       	ld	r24, Z
  d4:	8c b9       	out	0x0c, r24	; 12
	
	i++;
  d6:	80 91 74 00 	lds	r24, 0x0074
  da:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(i > 17)
  dc:	82 31       	cpi	r24, 0x12	; 18
  de:	18 f4       	brcc	.+6      	; 0xe6 <__vector_13+0x66>
{
	const char sampleText[] = "This a sample text";
	
	UDR = sampleText[i];
	
	i++;
  e0:	80 93 74 00 	sts	0x0074, r24
  e4:	0f c0       	rjmp	.+30     	; 0x104 <__vector_13+0x84>
	
	if(i > 17)
	{
		i = 0;
  e6:	10 92 74 00 	sts	0x0074, r1
		TX_NEWLINE;
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	2c d0       	rcall	.+88     	; 0x146 <transmitByte>
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	2a d0       	rcall	.+84     	; 0x146 <transmitByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	84 e3       	ldi	r24, 0x34	; 52
  f6:	9c e0       	ldi	r25, 0x0C	; 12
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <__vector_13+0x78>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__vector_13+0x82>
 102:	00 00       	nop
		_delay_ms(500);
	}
 104:	63 96       	adiw	r28, 0x13	; 19
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <USART_Init>:
//************************************************
//        Function to initialize USART
//************************************************
void USART_Init()
{
	UCSRB = (1 << RXCIE)  |  (1 << RXEN ) | (1 << TXEN );	//RX Complete Interrupt Enable, TX Complete Interrupt Enable, RX circuitry, TX circuitry
 136:	88 e9       	ldi	r24, 0x98	; 152
 138:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ1 ) | (1 << UCSZ0 );					// Use 8- bit character sizes
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = (BAUD_PRESCALE >> 8);	//Load upper 8- bits of the baud rate value into the high byte of the UBRR register
 13e:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;			//Load lower 8 - bits of the baud rate value into the low byte of the UBRR register	
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	89 b9       	out	0x09, r24	; 9
 144:	08 95       	ret

00000146 <transmitByte>:
//***************************************************
//       Function to transmit a single byte
//***************************************************
void transmitByte(unsigned char data)
{
	while((UCSRA & (1 << UDRE)) == 0) {}; //Do nothing until UDR is ready for more data to be written to it
 146:	5d 9b       	sbis	0x0b, 5	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <transmitByte>
	
	UDR = data;
 14a:	8c b9       	out	0x0c, r24	; 12
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
