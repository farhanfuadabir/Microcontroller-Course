
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012f  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000dc  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000143  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c5  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  000006f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_8>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRA  = 0xFF; 
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  70:	1b ba       	out	0x1b, r1	; 27
	
	TCCR1B |= (1 << CS12);	//Timer1, Normal mode, 256 prescaler
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	84 60       	ori	r24, 0x04	; 4
  76:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);	//Enable Timer1 overflow interrupt
  78:	89 b7       	in	r24, 0x39	; 57
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0x7A12;			//Input value to TCNT1
  7e:	82 e1       	ldi	r24, 0x12	; 18
  80:	9a e7       	ldi	r25, 0x7A	; 122
  82:	9d bd       	out	0x2d, r25	; 45
  84:	8c bd       	out	0x2c, r24	; 44
	sei();					//Enable Global interrupt
  86:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	81 e1       	ldi	r24, 0x11	; 17
  8c:	9a e7       	ldi	r25, 0x7A	; 122
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
  9a:	f6 cf       	rjmp	.-20     	; 0x88 <main+0x1c>

0000009c <__vector_8>:
		_delay_ms(5000);
    }
}

ISR(TIMER1_OVF_vect)		//ISR for Timer1 overflow
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	PORTA = ~PORTA;
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	80 95       	com	r24
  ae:	8b bb       	out	0x1b, r24	; 27

	TCNT1 = 0x7A12;			//Input value to TCNT1
  b0:	82 e1       	ldi	r24, 0x12	; 18
  b2:	9a e7       	ldi	r25, 0x7A	; 122
  b4:	9d bd       	out	0x2d, r25	; 45
  b6:	8c bd       	out	0x2c, r24	; 44
	TIFR |= 1 << TOV1;		//Clear Timer1 Overflow Flag
  b8:	88 b7       	in	r24, 0x38	; 56
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	88 bf       	out	0x38, r24	; 56
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
