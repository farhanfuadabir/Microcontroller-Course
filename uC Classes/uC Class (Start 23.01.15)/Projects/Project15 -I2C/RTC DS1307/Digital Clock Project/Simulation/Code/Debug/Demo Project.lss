
Demo Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000ac0  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080009c  0080009c  00000b90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000938  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000357  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000471  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ed  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	bf c1       	rjmp	.+894    	; 0x392 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3a       	cpi	r26, 0xAA	; 170
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	56 d1       	rcall	.+684    	; 0x306 <main>
  5a:	30 c5       	rjmp	.+2656   	; 0xabc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <RTC_Enable>:
		//----------------------------------------------------------------------------
	}
}

void RTC_Enable(void)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	1f 92       	push	r1
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	
	DS1307Read(0x00, &temp);	//Reads 0th byte and keeps in temp
  68:	be 01       	movw	r22, r28
  6a:	6f 5f       	subi	r22, 0xFF	; 255
  6c:	7f 4f       	sbci	r23, 0xFF	; 255
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	f7 d1       	rcall	.+1006   	; 0x460 <DS1307Read>
	temp &= (~(1 << 7));		//Make the 7th bit to 0
  72:	69 81       	ldd	r22, Y+1	; 0x01
  74:	6f 77       	andi	r22, 0x7F	; 127
  76:	69 83       	std	Y+1, r22	; 0x01
	DS1307Write(0x00, temp);	//Clear CH (7th) bit of RTC to enable DS1307
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	18 d2       	rcall	.+1072   	; 0x4ac <DS1307Write>
}
  7c:	0f 90       	pop	r0
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	08 95       	ret

00000084 <_12H_24H_Setup>:

void _12H_24H_Setup(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	1f 92       	push	r1
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	
	DS1307Read(0x02, &temp);	//Reads 2th byte and keeps in temp
  8e:	be 01       	movw	r22, r28
  90:	6f 5f       	subi	r22, 0xFF	; 255
  92:	7f 4f       	sbci	r23, 0xFF	; 255
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	e4 d1       	rcall	.+968    	; 0x460 <DS1307Read>
	temp &= (0b10111111);		//Make the 6th bit to 0 for 24-hour mode
  98:	69 81       	ldd	r22, Y+1	; 0x01
  9a:	6f 7b       	andi	r22, 0xBF	; 191
  9c:	69 83       	std	Y+1, r22	; 0x01
	DS1307Write(0x02, temp);	//Write 0 to 6th bit for 24-hour mode
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	05 d2       	rcall	.+1034   	; 0x4ac <DS1307Write>
}
  a2:	0f 90       	pop	r0
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <RTC_Read>:

void RTC_Read(void)
{
	DS1307Read(0x00, &Seconds);
  aa:	69 ea       	ldi	r22, 0xA9	; 169
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	d7 d1       	rcall	.+942    	; 0x460 <DS1307Read>
	DS1307Read(0x01, &Minutes);
  b2:	68 ea       	ldi	r22, 0xA8	; 168
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	d3 d1       	rcall	.+934    	; 0x460 <DS1307Read>
	DS1307Read(0x02, &Hours);
  ba:	6e e9       	ldi	r22, 0x9E	; 158
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	cf d1       	rcall	.+926    	; 0x460 <DS1307Read>
	DS1307Read(0x03, &Day);
  c2:	60 ea       	ldi	r22, 0xA0	; 160
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	cb d1       	rcall	.+918    	; 0x460 <DS1307Read>
	DS1307Read(0x04, &Date);
  ca:	6f e9       	ldi	r22, 0x9F	; 159
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	c7 d1       	rcall	.+910    	; 0x460 <DS1307Read>
	DS1307Read(0x05, &Month);
  d2:	67 ea       	ldi	r22, 0xA7	; 167
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	c3 d1       	rcall	.+902    	; 0x460 <DS1307Read>
	DS1307Read(0x06, &Year);
  da:	61 ea       	ldi	r22, 0xA1	; 161
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	bf d1       	rcall	.+894    	; 0x460 <DS1307Read>
  e2:	08 95       	ret

000000e4 <Convert_Data>:
}

void Convert_Data(void)
{
	Seconds = ((Seconds & 0b11110000) >> 4) * 10 + (Seconds & 0b00001111);
  e4:	80 91 a9 00 	lds	r24, 0x00A9
  e8:	98 2f       	mov	r25, r24
  ea:	92 95       	swap	r25
  ec:	9f 70       	andi	r25, 0x0F	; 15
  ee:	99 0f       	add	r25, r25
  f0:	29 2f       	mov	r18, r25
  f2:	22 0f       	add	r18, r18
  f4:	22 0f       	add	r18, r18
  f6:	92 0f       	add	r25, r18
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	98 0f       	add	r25, r24
  fc:	90 93 a9 00 	sts	0x00A9, r25
	Minutes = ((Minutes & 0b11110000) >> 4) * 10 + (Minutes & 0b00001111);
 100:	80 91 a8 00 	lds	r24, 0x00A8
 104:	98 2f       	mov	r25, r24
 106:	92 95       	swap	r25
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	99 0f       	add	r25, r25
 10c:	29 2f       	mov	r18, r25
 10e:	22 0f       	add	r18, r18
 110:	22 0f       	add	r18, r18
 112:	92 0f       	add	r25, r18
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	98 0f       	add	r25, r24
 118:	90 93 a8 00 	sts	0x00A8, r25
	Hours   = ((Hours   & 0b11110000) >> 4) * 10 + (Hours   & 0b00001111);
 11c:	80 91 9e 00 	lds	r24, 0x009E
 120:	98 2f       	mov	r25, r24
 122:	92 95       	swap	r25
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	99 0f       	add	r25, r25
 128:	29 2f       	mov	r18, r25
 12a:	22 0f       	add	r18, r18
 12c:	22 0f       	add	r18, r18
 12e:	92 0f       	add	r25, r18
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	98 0f       	add	r25, r24
 134:	90 93 9e 00 	sts	0x009E, r25
	Day     = Day;
	Year    = ((Year    & 0b11110000) >> 4) * 10 + (Year    & 0b00001111);
 138:	80 91 a1 00 	lds	r24, 0x00A1
 13c:	98 2f       	mov	r25, r24
 13e:	92 95       	swap	r25
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	99 0f       	add	r25, r25
 144:	29 2f       	mov	r18, r25
 146:	22 0f       	add	r18, r18
 148:	22 0f       	add	r18, r18
 14a:	92 0f       	add	r25, r18
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	98 0f       	add	r25, r24
 150:	90 93 a1 00 	sts	0x00A1, r25
	Date    = ((Date    & 0b11110000) >> 4) * 10 + (Date    & 0b00001111);
 154:	80 91 9f 00 	lds	r24, 0x009F
 158:	98 2f       	mov	r25, r24
 15a:	92 95       	swap	r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	99 0f       	add	r25, r25
 160:	29 2f       	mov	r18, r25
 162:	22 0f       	add	r18, r18
 164:	22 0f       	add	r18, r18
 166:	92 0f       	add	r25, r18
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	98 0f       	add	r25, r24
 16c:	90 93 9f 00 	sts	0x009F, r25
	Month   = ((Month   & 0b11110000) >> 4) * 10 + (Month   & 0b00001111);
 170:	80 91 a7 00 	lds	r24, 0x00A7
 174:	98 2f       	mov	r25, r24
 176:	92 95       	swap	r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	99 0f       	add	r25, r25
 17c:	29 2f       	mov	r18, r25
 17e:	22 0f       	add	r18, r18
 180:	22 0f       	add	r18, r18
 182:	92 0f       	add	r25, r18
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	98 0f       	add	r25, r24
 188:	90 93 a7 00 	sts	0x00A7, r25
 18c:	08 95       	ret

0000018e <RTC_Write>:
}

void RTC_Write(void)
{
 18e:	cf 93       	push	r28
	uint8_t temp;
	
	temp = ((Seconds / 10) << 4) | (Seconds % 10);
 190:	60 91 a9 00 	lds	r22, 0x00A9
 194:	cd ec       	ldi	r28, 0xCD	; 205
 196:	6c 9f       	mul	r22, r28
 198:	21 2d       	mov	r18, r1
 19a:	11 24       	eor	r1, r1
 19c:	26 95       	lsr	r18
 19e:	26 95       	lsr	r18
 1a0:	26 95       	lsr	r18
 1a2:	30 e1       	ldi	r19, 0x10	; 16
 1a4:	23 9f       	mul	r18, r19
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	92 2f       	mov	r25, r18
 1ac:	99 0f       	add	r25, r25
 1ae:	29 2f       	mov	r18, r25
 1b0:	22 0f       	add	r18, r18
 1b2:	22 0f       	add	r18, r18
 1b4:	92 0f       	add	r25, r18
 1b6:	69 1b       	sub	r22, r25
 1b8:	68 2b       	or	r22, r24
	DS1307Write(0x00, temp);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	77 d1       	rcall	.+750    	; 0x4ac <DS1307Write>

	temp = ((Minutes / 10) << 4) | (Minutes % 10);
 1be:	60 91 a8 00 	lds	r22, 0x00A8
 1c2:	6c 9f       	mul	r22, r28
 1c4:	21 2d       	mov	r18, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	26 95       	lsr	r18
 1ca:	26 95       	lsr	r18
 1cc:	26 95       	lsr	r18
 1ce:	30 e1       	ldi	r19, 0x10	; 16
 1d0:	23 9f       	mul	r18, r19
 1d2:	c0 01       	movw	r24, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	92 2f       	mov	r25, r18
 1d8:	99 0f       	add	r25, r25
 1da:	29 2f       	mov	r18, r25
 1dc:	22 0f       	add	r18, r18
 1de:	22 0f       	add	r18, r18
 1e0:	92 0f       	add	r25, r18
 1e2:	69 1b       	sub	r22, r25
 1e4:	68 2b       	or	r22, r24
	DS1307Write(0x01, temp);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	61 d1       	rcall	.+706    	; 0x4ac <DS1307Write>

	temp = ((Hours / 10)   << 4) | (Hours % 10);
 1ea:	60 91 9e 00 	lds	r22, 0x009E
 1ee:	6c 9f       	mul	r22, r28
 1f0:	21 2d       	mov	r18, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	26 95       	lsr	r18
 1f6:	26 95       	lsr	r18
 1f8:	26 95       	lsr	r18
 1fa:	30 e1       	ldi	r19, 0x10	; 16
 1fc:	23 9f       	mul	r18, r19
 1fe:	c0 01       	movw	r24, r0
 200:	11 24       	eor	r1, r1
 202:	92 2f       	mov	r25, r18
 204:	99 0f       	add	r25, r25
 206:	29 2f       	mov	r18, r25
 208:	22 0f       	add	r18, r18
 20a:	22 0f       	add	r18, r18
 20c:	92 0f       	add	r25, r18
 20e:	69 1b       	sub	r22, r25
 210:	68 2b       	or	r22, r24
	DS1307Write(0x02, temp);
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	4b d1       	rcall	.+662    	; 0x4ac <DS1307Write>
	
	temp = Day;
	DS1307Write(0x03, temp);
 216:	60 91 a0 00 	lds	r22, 0x00A0
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	47 d1       	rcall	.+654    	; 0x4ac <DS1307Write>
	
	temp = ((Date / 10)   << 4) | (Date % 10);
 21e:	60 91 9f 00 	lds	r22, 0x009F
 222:	6c 9f       	mul	r22, r28
 224:	21 2d       	mov	r18, r1
 226:	11 24       	eor	r1, r1
 228:	26 95       	lsr	r18
 22a:	26 95       	lsr	r18
 22c:	26 95       	lsr	r18
 22e:	30 e1       	ldi	r19, 0x10	; 16
 230:	23 9f       	mul	r18, r19
 232:	c0 01       	movw	r24, r0
 234:	11 24       	eor	r1, r1
 236:	92 2f       	mov	r25, r18
 238:	99 0f       	add	r25, r25
 23a:	29 2f       	mov	r18, r25
 23c:	22 0f       	add	r18, r18
 23e:	22 0f       	add	r18, r18
 240:	92 0f       	add	r25, r18
 242:	69 1b       	sub	r22, r25
 244:	68 2b       	or	r22, r24
	DS1307Write(0x04, temp);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	31 d1       	rcall	.+610    	; 0x4ac <DS1307Write>
	
	temp = ((Month / 10)   << 4) | (Month % 10);
 24a:	60 91 a7 00 	lds	r22, 0x00A7
 24e:	6c 9f       	mul	r22, r28
 250:	21 2d       	mov	r18, r1
 252:	11 24       	eor	r1, r1
 254:	26 95       	lsr	r18
 256:	26 95       	lsr	r18
 258:	26 95       	lsr	r18
 25a:	30 e1       	ldi	r19, 0x10	; 16
 25c:	23 9f       	mul	r18, r19
 25e:	c0 01       	movw	r24, r0
 260:	11 24       	eor	r1, r1
 262:	92 2f       	mov	r25, r18
 264:	99 0f       	add	r25, r25
 266:	29 2f       	mov	r18, r25
 268:	22 0f       	add	r18, r18
 26a:	22 0f       	add	r18, r18
 26c:	92 0f       	add	r25, r18
 26e:	69 1b       	sub	r22, r25
 270:	68 2b       	or	r22, r24
	DS1307Write(0x05, temp);
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	1b d1       	rcall	.+566    	; 0x4ac <DS1307Write>
	
	temp = ((Year / 10)   << 4) | (Year % 10);
 276:	60 91 a1 00 	lds	r22, 0x00A1
 27a:	6c 9f       	mul	r22, r28
 27c:	c1 2d       	mov	r28, r1
 27e:	11 24       	eor	r1, r1
 280:	c6 95       	lsr	r28
 282:	c6 95       	lsr	r28
 284:	c6 95       	lsr	r28
 286:	20 e1       	ldi	r18, 0x10	; 16
 288:	c2 9f       	mul	r28, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	cc 0f       	add	r28, r28
 290:	9c 2f       	mov	r25, r28
 292:	99 0f       	add	r25, r25
 294:	99 0f       	add	r25, r25
 296:	c9 0f       	add	r28, r25
 298:	6c 1b       	sub	r22, r28
 29a:	68 2b       	or	r22, r24
	DS1307Write(0x06, temp);
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	06 d1       	rcall	.+524    	; 0x4ac <DS1307Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	80 e7       	ldi	r24, 0x70	; 112
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	31 50       	subi	r19, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <RTC_Write+0x118>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <RTC_Write+0x122>
 2b0:	00 00       	nop
	
	_delay_ms(100);
}
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <show_hours>:

void show_hours(void)
{
	show[0] = (Hours / 10);
 2b6:	80 91 9e 00 	lds	r24, 0x009E
 2ba:	9d ec       	ldi	r25, 0xCD	; 205
 2bc:	89 9f       	mul	r24, r25
 2be:	91 2d       	mov	r25, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	96 95       	lsr	r25
 2c4:	96 95       	lsr	r25
 2c6:	96 95       	lsr	r25
 2c8:	90 93 a2 00 	sts	0x00A2, r25
	show[1] = (Hours % 10);
 2cc:	99 0f       	add	r25, r25
 2ce:	29 2f       	mov	r18, r25
 2d0:	22 0f       	add	r18, r18
 2d2:	22 0f       	add	r18, r18
 2d4:	92 0f       	add	r25, r18
 2d6:	89 1b       	sub	r24, r25
 2d8:	80 93 a3 00 	sts	0x00A3, r24
 2dc:	08 95       	ret

000002de <show_minutes>:
}

void show_minutes(void)
{
	show[2] = (Minutes / 10);
 2de:	80 91 a8 00 	lds	r24, 0x00A8
 2e2:	9d ec       	ldi	r25, 0xCD	; 205
 2e4:	89 9f       	mul	r24, r25
 2e6:	91 2d       	mov	r25, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	96 95       	lsr	r25
 2ec:	96 95       	lsr	r25
 2ee:	96 95       	lsr	r25
 2f0:	90 93 a4 00 	sts	0x00A4, r25
	show[3] = (Minutes % 10);
 2f4:	99 0f       	add	r25, r25
 2f6:	29 2f       	mov	r18, r25
 2f8:	22 0f       	add	r18, r18
 2fa:	22 0f       	add	r18, r18
 2fc:	92 0f       	add	r25, r18
 2fe:	89 1b       	sub	r24, r25
 300:	80 93 a5 00 	sts	0x00A5, r24
 304:	08 95       	ret

00000306 <main>:
//----------------------------------------------------------------------------

int main(void)
{
	//----------------------------------------------------------------------------
	DDRB  |= 0b11111111;
 306:	87 b3       	in	r24, 0x17	; 23
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0b00000000;
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	88 bb       	out	0x18, r24	; 24
	
	DDRD  |= 0b00001111;
 310:	81 b3       	in	r24, 0x11	; 17
 312:	8f 60       	ori	r24, 0x0F	; 15
 314:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b00000000;
 316:	82 b3       	in	r24, 0x12	; 18
 318:	82 bb       	out	0x12, r24	; 18
	//----------------------------------------------------------------------------
	TCCR0 |= (1 << CS02);		//Timer0, Normal mode, 256 prescaler
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	84 60       	ori	r24, 0x04	; 4
 31e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);		//Enable Timer0 overflow interrupt
 320:	89 b7       	in	r24, 0x39	; 57
 322:	81 60       	ori	r24, 0x01	; 1
 324:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 100;				//Clear TCNT0	
 326:	84 e6       	ldi	r24, 0x64	; 100
 328:	82 bf       	out	0x32, r24	; 50
	//----------------------------------------------------------------------------
	RTC_Enable();				//Enable RTC
 32a:	99 de       	rcall	.-718    	; 0x5e <RTC_Enable>
	_12H_24H_Setup();			//Select 12H / 24H mode
 32c:	ab de       	rcall	.-682    	; 0x84 <_12H_24H_Setup>
 32e:	2f e7       	ldi	r18, 0x7F	; 127
 330:	88 e3       	ldi	r24, 0x38	; 56
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x2e>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x38>
 33e:	00 00       	nop
	_delay_ms(50);				//Delay for stabilization
	I2CInit();					//Initialize I2C Bus
 340:	d1 d0       	rcall	.+418    	; 0x4e4 <I2CInit>
	
	
	
	Seconds = 0, Minutes = 5, Hours = 13, Date = 12, Day = 7, Month = 12, Year = 14;
 342:	10 92 a9 00 	sts	0x00A9, r1
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	80 93 a8 00 	sts	0x00A8, r24
 34c:	8d e0       	ldi	r24, 0x0D	; 13
 34e:	80 93 9e 00 	sts	0x009E, r24
 352:	8c e0       	ldi	r24, 0x0C	; 12
 354:	80 93 9f 00 	sts	0x009F, r24
 358:	97 e0       	ldi	r25, 0x07	; 7
 35a:	90 93 a0 00 	sts	0x00A0, r25
 35e:	80 93 a7 00 	sts	0x00A7, r24
 362:	8e e0       	ldi	r24, 0x0E	; 14
 364:	80 93 a1 00 	sts	0x00A1, r24
	RTC_Write();
 368:	12 df       	rcall	.-476    	; 0x18e <RTC_Write>
	
	
	
	//----------------------------------------------------------------------------
	sei();						//Enable Global interrupt
 36a:	78 94       	sei
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	89 e6       	ldi	r24, 0x69	; 105
 370:	98 e1       	ldi	r25, 0x18	; 24
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x6c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x76>
 37c:	00 00       	nop
	
	while(1)
	{
		//----------------------------------------------------------------------------
		_delay_ms(1000);
		blinkFlag = ~blinkFlag;		
 37e:	80 91 9c 00 	lds	r24, 0x009C
 382:	80 95       	com	r24
 384:	80 93 9c 00 	sts	0x009C, r24
		//----------------------------------------------------------------------------		
		RTC_Read();
 388:	90 de       	rcall	.-736    	; 0xaa <RTC_Read>
		Convert_Data();		
 38a:	ac de       	rcall	.-680    	; 0xe4 <Convert_Data>
		show_hours();
 38c:	94 df       	rcall	.-216    	; 0x2b6 <show_hours>
		show_minutes();
 38e:	a7 df       	rcall	.-178    	; 0x2de <show_minutes>
 390:	ed cf       	rjmp	.-38     	; 0x36c <main+0x66>

00000392 <__vector_9>:
	show[2] = (Minutes / 10);
	show[3] = (Minutes % 10);
}

ISR(TIMER0_OVF_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	anodeSelect++;
 3a2:	80 91 9d 00 	lds	r24, 0x009D
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 93 9d 00 	sts	0x009D, r24
	
	if(anodeSelect == 1)
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	51 f4       	brne	.+20     	; 0x3c4 <__vector_9+0x32>
	{
		PORTD = 0x10;		
 3b0:	80 e1       	ldi	r24, 0x10	; 16
 3b2:	82 bb       	out	0x12, r24	; 18
		PORTB = digitNormalNoDot[show[0]];
 3b4:	e0 91 a2 00 	lds	r30, 0x00A2
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	e3 57       	subi	r30, 0x73	; 115
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	80 81       	ld	r24, Z
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	41 c0       	rjmp	.+130    	; 0x446 <__vector_9+0xb4>
	}
	else if(anodeSelect == 2)
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	c1 f4       	brne	.+48     	; 0x3f8 <__vector_9+0x66>
	{
		if(blinkFlag)
 3c8:	80 91 9c 00 	lds	r24, 0x009C
 3cc:	88 23       	and	r24, r24
 3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_9+0x52>
		{
			PORTD = 0x20;
 3d0:	80 e2       	ldi	r24, 0x20	; 32
 3d2:	82 bb       	out	0x12, r24	; 18
			PORTB = digitNormalDotted[show[1]];
 3d4:	e0 91 a3 00 	lds	r30, 0x00A3
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	e2 58       	subi	r30, 0x82	; 130
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	80 81       	ld	r24, Z
 3e0:	88 bb       	out	0x18, r24	; 24
 3e2:	31 c0       	rjmp	.+98     	; 0x446 <__vector_9+0xb4>
		}
		else
		{
			PORTD = 0x20;
 3e4:	80 e2       	ldi	r24, 0x20	; 32
 3e6:	82 bb       	out	0x12, r24	; 18
			PORTB = digitNormalNoDot[show[1]];
 3e8:	e0 91 a3 00 	lds	r30, 0x00A3
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	e3 57       	subi	r30, 0x73	; 115
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	80 81       	ld	r24, Z
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	27 c0       	rjmp	.+78     	; 0x446 <__vector_9+0xb4>
		}
	}
	else if(anodeSelect == 3)
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	c1 f4       	brne	.+48     	; 0x42c <__vector_9+0x9a>
	{
		if(blinkFlag)
 3fc:	80 91 9c 00 	lds	r24, 0x009C
 400:	88 23       	and	r24, r24
 402:	51 f0       	breq	.+20     	; 0x418 <__vector_9+0x86>
		{
			PORTD = 0x40;
 404:	80 e4       	ldi	r24, 0x40	; 64
 406:	82 bb       	out	0x12, r24	; 18
			PORTB = digitMirrorDotted[show[2]];
 408:	e0 91 a4 00 	lds	r30, 0x00A4
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	e0 5a       	subi	r30, 0xA0	; 160
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	80 81       	ld	r24, Z
 414:	88 bb       	out	0x18, r24	; 24
 416:	17 c0       	rjmp	.+46     	; 0x446 <__vector_9+0xb4>
		}
		else
		{
			PORTD = 0x40;
 418:	80 e4       	ldi	r24, 0x40	; 64
 41a:	82 bb       	out	0x12, r24	; 18
			PORTB = digitMirrorNoDot[show[2]];
 41c:	e0 91 a4 00 	lds	r30, 0x00A4
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	e1 59       	subi	r30, 0x91	; 145
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	80 81       	ld	r24, Z
 428:	88 bb       	out	0x18, r24	; 24
 42a:	0d c0       	rjmp	.+26     	; 0x446 <__vector_9+0xb4>
		}
	}
	else if(anodeSelect == 4)
 42c:	84 30       	cpi	r24, 0x04	; 4
 42e:	59 f4       	brne	.+22     	; 0x446 <__vector_9+0xb4>
	{
		PORTD = 0x80;		
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	82 bb       	out	0x12, r24	; 18
		PORTB = digitNormalNoDot[show[3]];
 434:	e0 91 a5 00 	lds	r30, 0x00A5
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	e3 57       	subi	r30, 0x73	; 115
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	80 81       	ld	r24, Z
 440:	88 bb       	out	0x18, r24	; 24
		
		anodeSelect = 0;
 442:	10 92 9d 00 	sts	0x009D, r1
	}

	TCNT0 = 100;		//Clear TCNT0
 446:	84 e6       	ldi	r24, 0x64	; 100
 448:	82 bf       	out	0x32, r24	; 50
	TIFR |= 1 << TOV0;	//Clear Timer0 Overflow Flag
 44a:	88 b7       	in	r24, 0x38	; 56
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	88 bf       	out	0x38, r24	; 56
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	8f 91       	pop	r24
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <DS1307Read>:
0 = Failure
1 = Success
***************************************************/

uint8_t DS1307Read(uint8_t address, uint8_t *data)
{
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	18 2f       	mov	r17, r24
 468:	eb 01       	movw	r28, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
 46a:	45 d0       	rcall	.+138    	; 0x4f6 <I2CStart>
	
	//SLA + W (for dummy write to set register pointer)
	res = I2CWriteByte(0b11010000);	//DS1307 address + W
 46c:	80 ed       	ldi	r24, 0xD0	; 208
 46e:	4f d0       	rcall	.+158    	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 470:	88 23       	and	r24, r24
 472:	89 f0       	breq	.+34     	; 0x496 <DS1307Read+0x36>
	
	//Now send the address of required register
	res = I2CWriteByte(address);
 474:	81 2f       	mov	r24, r17
 476:	4b d0       	rcall	.+150    	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 478:	88 23       	and	r24, r24
 47a:	79 f0       	breq	.+30     	; 0x49a <DS1307Read+0x3a>
	
	//Repeat Start
	I2CStart();
 47c:	3c d0       	rcall	.+120    	; 0x4f6 <I2CStart>
	
	//SLA + R
	res = I2CWriteByte(0b11010001);	//DS1307 Address + R
 47e:	81 ed       	ldi	r24, 0xD1	; 209
 480:	46 d0       	rcall	.+140    	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 482:	88 23       	and	r24, r24
 484:	61 f0       	breq	.+24     	; 0x49e <DS1307Read+0x3e>
	
	//Now read the value with NACK
	res = I2CReadByte(data,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	ce 01       	movw	r24, r28
 48a:	5a d0       	rcall	.+180    	; 0x540 <I2CReadByte>
	
	//Error
	if(!res)	return FALSE;
 48c:	88 23       	and	r24, r24
 48e:	49 f0       	breq	.+18     	; 0x4a2 <DS1307Read+0x42>
	
	//STOP
	I2CStop();
 490:	38 d0       	rcall	.+112    	; 0x502 <I2CStop>
	
	return TRUE;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <DS1307Read+0x44>
	
	//SLA + W (for dummy write to set register pointer)
	res = I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <DS1307Read+0x44>
	
	//Now send the address of required register
	res = I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <DS1307Read+0x44>
	
	//SLA + R
	res = I2CWriteByte(0b11010001);	//DS1307 Address + R
	
	//Error
	if(!res)	return FALSE;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <DS1307Read+0x44>
	
	//Now read the value with NACK
	res = I2CReadByte(data,0);
	
	//Error
	if(!res)	return FALSE;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	I2CStop();
	
	return TRUE;
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	08 95       	ret

000004ac <DS1307Write>:
0= Failure
1= Success
***************************************************/

uint8_t DS1307Write(uint8_t address, uint8_t data)
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	c8 2f       	mov	r28, r24
 4b2:	d6 2f       	mov	r29, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
 4b4:	20 d0       	rcall	.+64     	; 0x4f6 <I2CStart>
	
	//SLA+W
	res = I2CWriteByte(0b11010000);	//DS1307 address + W
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	2a d0       	rcall	.+84     	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 4ba:	88 23       	and	r24, r24
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <DS1307Write+0x28>
	
	//Now send the address of required register
	res = I2CWriteByte(address);
 4be:	8c 2f       	mov	r24, r28
 4c0:	26 d0       	rcall	.+76     	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 4c2:	88 23       	and	r24, r24
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <DS1307Write+0x2c>
	
	//Now write the value
	res = I2CWriteByte(data);
 4c6:	8d 2f       	mov	r24, r29
 4c8:	22 d0       	rcall	.+68     	; 0x50e <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 4ca:	88 23       	and	r24, r24
 4cc:	39 f0       	breq	.+14     	; 0x4dc <DS1307Write+0x30>
	
	//STOP
	I2CStop();
 4ce:	19 d0       	rcall	.+50     	; 0x502 <I2CStop>
	
	return TRUE;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <DS1307Write+0x32>
	
	//SLA+W
	res = I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <DS1307Write+0x32>
	
	//Now send the address of required register
	res = I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	01 c0       	rjmp	.+2      	; 0x4de <DS1307Write+0x32>
	
	//Now write the value
	res = I2CWriteByte(data);
	
	//Error
	if(!res)	return FALSE;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	I2CStop();
	
	return TRUE;
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <I2CInit>:
#include "i2c_lib.h"

void I2CInit()
{
	//Set up TWI Module
	TWBR = 0b00000010;
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	80 b9       	out	0x00, r24	; 0
	TWSR |= ((1 << TWPS1) | (1 << TWPS0));
 4e8:	81 b1       	in	r24, 0x01	; 1
 4ea:	83 60       	ori	r24, 0x03	; 3
 4ec:	81 b9       	out	0x01, r24	; 1
	
	//Enable the TWI Module
	TWCR |= (1 << TWEN);
 4ee:	86 b7       	in	r24, 0x36	; 54
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	86 bf       	out	0x36, r24	; 54
 4f4:	08 95       	ret

000004f6 <I2CStart>:
}

void I2CStart()
{
	//Put Start Condition on Bus
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
 4f6:	84 ea       	ldi	r24, 0xA4	; 164
 4f8:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1 << TWINT)));
 4fa:	06 b6       	in	r0, 0x36	; 54
 4fc:	07 fe       	sbrs	r0, 7
 4fe:	fd cf       	rjmp	.-6      	; 0x4fa <I2CStart+0x4>
}
 500:	08 95       	ret

00000502 <I2CStop>:

void I2CStop()
{
	//Put Stop Condition on bus
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 502:	84 e9       	ldi	r24, 0x94	; 148
 504:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1 << TWSTO));
 506:	06 b6       	in	r0, 0x36	; 54
 508:	04 fc       	sbrc	r0, 4
 50a:	fd cf       	rjmp	.-6      	; 0x506 <I2CStop+0x4>
	//_delay_loop_2(250);
}
 50c:	08 95       	ret

0000050e <I2CWriteByte>:

uint8_t I2CWriteByte(uint8_t data)
{	
	TWDR = data;
 50e:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR = (1 << TWEN) | (1 << TWINT);
 510:	84 e8       	ldi	r24, 0x84	; 132
 512:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1 << TWINT)));
 514:	06 b6       	in	r0, 0x36	; 54
 516:	07 fe       	sbrs	r0, 7
 518:	fd cf       	rjmp	.-6      	; 0x514 <I2CWriteByte+0x6>

	//Check Status
	if((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x28 || (TWSR & 0xF8) == 0x40)
 51a:	81 b1       	in	r24, 0x01	; 1
 51c:	88 7f       	andi	r24, 0xF8	; 248
 51e:	88 31       	cpi	r24, 0x18	; 24
 520:	59 f0       	breq	.+22     	; 0x538 <I2CWriteByte+0x2a>
 522:	81 b1       	in	r24, 0x01	; 1
 524:	88 7f       	andi	r24, 0xF8	; 248
 526:	88 32       	cpi	r24, 0x28	; 40
 528:	49 f0       	breq	.+18     	; 0x53c <I2CWriteByte+0x2e>
 52a:	91 b1       	in	r25, 0x01	; 1
 52c:	98 7f       	andi	r25, 0xF8	; 248
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 34       	cpi	r25, 0x40	; 64
 532:	29 f0       	breq	.+10     	; 0x53e <I2CWriteByte+0x30>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
		//or
		//SLA + R Transmitted and ACK received
		//or
		//DATA Transmitted and ACK received

		return TRUE;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	08 95       	ret
 53c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return FALSE;	//Error
	}		
}
 53e:	08 95       	ret

00000540 <I2CReadByte>:

uint8_t I2CReadByte(uint8_t *data, uint8_t ack)
{
	//Set up ACK
	if(ack)
 540:	66 23       	and	r22, r22
 542:	21 f0       	breq	.+8      	; 0x54c <I2CReadByte+0xc>
	{
		//return ACK after reception
		TWCR |= (1 << TWEA);
 544:	26 b7       	in	r18, 0x36	; 54
 546:	20 64       	ori	r18, 0x40	; 64
 548:	26 bf       	out	0x36, r18	; 54
 54a:	03 c0       	rjmp	.+6      	; 0x552 <I2CReadByte+0x12>
	else
	{
		//return NACK after reception
		//Signals slave to stop giving more data
		//usually used for last byte read.
		TWCR &=(~(1 << TWEA));
 54c:	26 b7       	in	r18, 0x36	; 54
 54e:	2f 7b       	andi	r18, 0xBF	; 191
 550:	26 bf       	out	0x36, r18	; 54
	}
	
	//Now enable Reception of data by clearing TWINT
	TWCR |= (1 << TWINT);
 552:	26 b7       	in	r18, 0x36	; 54
 554:	20 68       	ori	r18, 0x80	; 128
 556:	26 bf       	out	0x36, r18	; 54

	//Wait till done
	while(!(TWCR & (1 << TWINT)));
 558:	06 b6       	in	r0, 0x36	; 54
 55a:	07 fe       	sbrs	r0, 7
 55c:	fd cf       	rjmp	.-6      	; 0x558 <I2CReadByte+0x18>

	//Check status
	if((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50)
 55e:	21 b1       	in	r18, 0x01	; 1
 560:	28 7f       	andi	r18, 0xF8	; 248
 562:	28 35       	cpi	r18, 0x58	; 88
 564:	21 f0       	breq	.+8      	; 0x56e <I2CReadByte+0x2e>
 566:	21 b1       	in	r18, 0x01	; 1
 568:	28 7f       	andi	r18, 0xF8	; 248
 56a:	20 35       	cpi	r18, 0x50	; 80
 56c:	29 f4       	brne	.+10     	; 0x578 <I2CReadByte+0x38>
		//Data received and ACK returned
		//	or
		//Data received and NACK returned
		//Read the data

		*data = TWDR;
 56e:	23 b1       	in	r18, 0x03	; 3
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
		return TRUE;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret
	}
	else
	{
		return FALSE;	//Error
 578:	80 e0       	ldi	r24, 0x00	; 0
	}	
 57a:	08 95       	ret

0000057c <vfprintf>:
 57c:	ac e0       	ldi	r26, 0x0C	; 12
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e3 ec       	ldi	r30, 0xC3	; 195
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	64 c2       	rjmp	.+1224   	; 0xa4e <__prologue_saves__>
 586:	7c 01       	movw	r14, r24
 588:	6b 01       	movw	r12, r22
 58a:	8a 01       	movw	r16, r20
 58c:	fc 01       	movw	r30, r24
 58e:	17 82       	std	Z+7, r1	; 0x07
 590:	16 82       	std	Z+6, r1	; 0x06
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	81 ff       	sbrs	r24, 1
 596:	b0 c1       	rjmp	.+864    	; 0x8f8 <vfprintf+0x37c>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	4c 01       	movw	r8, r24
 59e:	f7 01       	movw	r30, r14
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
 5a2:	f6 01       	movw	r30, r12
 5a4:	93 fd       	sbrc	r25, 3
 5a6:	85 91       	lpm	r24, Z+
 5a8:	93 ff       	sbrs	r25, 3
 5aa:	81 91       	ld	r24, Z+
 5ac:	6f 01       	movw	r12, r30
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <vfprintf+0x38>
 5b2:	9e c1       	rjmp	.+828    	; 0x8f0 <vfprintf+0x374>
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <vfprintf+0x4a>
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	6f 01       	movw	r12, r30
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	21 f4       	brne	.+8      	; 0x5ce <vfprintf+0x52>
 5c6:	b7 01       	movw	r22, r14
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	b1 d1       	rcall	.+866    	; 0x92e <fputc>
 5cc:	e8 cf       	rjmp	.-48     	; 0x59e <vfprintf+0x22>
 5ce:	51 2c       	mov	r5, r1
 5d0:	31 2c       	mov	r3, r1
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	20 32       	cpi	r18, 0x20	; 32
 5d6:	a0 f4       	brcc	.+40     	; 0x600 <vfprintf+0x84>
 5d8:	8b 32       	cpi	r24, 0x2B	; 43
 5da:	69 f0       	breq	.+26     	; 0x5f6 <vfprintf+0x7a>
 5dc:	30 f4       	brcc	.+12     	; 0x5ea <vfprintf+0x6e>
 5de:	80 32       	cpi	r24, 0x20	; 32
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <vfprintf+0x7c>
 5e2:	83 32       	cpi	r24, 0x23	; 35
 5e4:	69 f4       	brne	.+26     	; 0x600 <vfprintf+0x84>
 5e6:	20 61       	ori	r18, 0x10	; 16
 5e8:	2c c0       	rjmp	.+88     	; 0x642 <vfprintf+0xc6>
 5ea:	8d 32       	cpi	r24, 0x2D	; 45
 5ec:	39 f0       	breq	.+14     	; 0x5fc <vfprintf+0x80>
 5ee:	80 33       	cpi	r24, 0x30	; 48
 5f0:	39 f4       	brne	.+14     	; 0x600 <vfprintf+0x84>
 5f2:	21 60       	ori	r18, 0x01	; 1
 5f4:	26 c0       	rjmp	.+76     	; 0x642 <vfprintf+0xc6>
 5f6:	22 60       	ori	r18, 0x02	; 2
 5f8:	24 60       	ori	r18, 0x04	; 4
 5fa:	23 c0       	rjmp	.+70     	; 0x642 <vfprintf+0xc6>
 5fc:	28 60       	ori	r18, 0x08	; 8
 5fe:	21 c0       	rjmp	.+66     	; 0x642 <vfprintf+0xc6>
 600:	27 fd       	sbrc	r18, 7
 602:	27 c0       	rjmp	.+78     	; 0x652 <vfprintf+0xd6>
 604:	30 ed       	ldi	r19, 0xD0	; 208
 606:	38 0f       	add	r19, r24
 608:	3a 30       	cpi	r19, 0x0A	; 10
 60a:	78 f4       	brcc	.+30     	; 0x62a <vfprintf+0xae>
 60c:	26 ff       	sbrs	r18, 6
 60e:	06 c0       	rjmp	.+12     	; 0x61c <vfprintf+0xa0>
 610:	fa e0       	ldi	r31, 0x0A	; 10
 612:	5f 9e       	mul	r5, r31
 614:	30 0d       	add	r19, r0
 616:	11 24       	eor	r1, r1
 618:	53 2e       	mov	r5, r19
 61a:	13 c0       	rjmp	.+38     	; 0x642 <vfprintf+0xc6>
 61c:	8a e0       	ldi	r24, 0x0A	; 10
 61e:	38 9e       	mul	r3, r24
 620:	30 0d       	add	r19, r0
 622:	11 24       	eor	r1, r1
 624:	33 2e       	mov	r3, r19
 626:	20 62       	ori	r18, 0x20	; 32
 628:	0c c0       	rjmp	.+24     	; 0x642 <vfprintf+0xc6>
 62a:	8e 32       	cpi	r24, 0x2E	; 46
 62c:	21 f4       	brne	.+8      	; 0x636 <vfprintf+0xba>
 62e:	26 fd       	sbrc	r18, 6
 630:	5f c1       	rjmp	.+702    	; 0x8f0 <vfprintf+0x374>
 632:	20 64       	ori	r18, 0x40	; 64
 634:	06 c0       	rjmp	.+12     	; 0x642 <vfprintf+0xc6>
 636:	8c 36       	cpi	r24, 0x6C	; 108
 638:	11 f4       	brne	.+4      	; 0x63e <vfprintf+0xc2>
 63a:	20 68       	ori	r18, 0x80	; 128
 63c:	02 c0       	rjmp	.+4      	; 0x642 <vfprintf+0xc6>
 63e:	88 36       	cpi	r24, 0x68	; 104
 640:	41 f4       	brne	.+16     	; 0x652 <vfprintf+0xd6>
 642:	f6 01       	movw	r30, r12
 644:	93 fd       	sbrc	r25, 3
 646:	85 91       	lpm	r24, Z+
 648:	93 ff       	sbrs	r25, 3
 64a:	81 91       	ld	r24, Z+
 64c:	6f 01       	movw	r12, r30
 64e:	81 11       	cpse	r24, r1
 650:	c1 cf       	rjmp	.-126    	; 0x5d4 <vfprintf+0x58>
 652:	98 2f       	mov	r25, r24
 654:	9f 7d       	andi	r25, 0xDF	; 223
 656:	95 54       	subi	r25, 0x45	; 69
 658:	93 30       	cpi	r25, 0x03	; 3
 65a:	28 f4       	brcc	.+10     	; 0x666 <vfprintf+0xea>
 65c:	0c 5f       	subi	r16, 0xFC	; 252
 65e:	1f 4f       	sbci	r17, 0xFF	; 255
 660:	ff e3       	ldi	r31, 0x3F	; 63
 662:	f9 83       	std	Y+1, r31	; 0x01
 664:	0d c0       	rjmp	.+26     	; 0x680 <vfprintf+0x104>
 666:	83 36       	cpi	r24, 0x63	; 99
 668:	31 f0       	breq	.+12     	; 0x676 <vfprintf+0xfa>
 66a:	83 37       	cpi	r24, 0x73	; 115
 66c:	71 f0       	breq	.+28     	; 0x68a <vfprintf+0x10e>
 66e:	83 35       	cpi	r24, 0x53	; 83
 670:	09 f0       	breq	.+2      	; 0x674 <vfprintf+0xf8>
 672:	57 c0       	rjmp	.+174    	; 0x722 <vfprintf+0x1a6>
 674:	21 c0       	rjmp	.+66     	; 0x6b8 <vfprintf+0x13c>
 676:	f8 01       	movw	r30, r16
 678:	80 81       	ld	r24, Z
 67a:	89 83       	std	Y+1, r24	; 0x01
 67c:	0e 5f       	subi	r16, 0xFE	; 254
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	44 24       	eor	r4, r4
 682:	43 94       	inc	r4
 684:	51 2c       	mov	r5, r1
 686:	54 01       	movw	r10, r8
 688:	14 c0       	rjmp	.+40     	; 0x6b2 <vfprintf+0x136>
 68a:	38 01       	movw	r6, r16
 68c:	f2 e0       	ldi	r31, 0x02	; 2
 68e:	6f 0e       	add	r6, r31
 690:	71 1c       	adc	r7, r1
 692:	f8 01       	movw	r30, r16
 694:	a0 80       	ld	r10, Z
 696:	b1 80       	ldd	r11, Z+1	; 0x01
 698:	26 ff       	sbrs	r18, 6
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <vfprintf+0x126>
 69c:	65 2d       	mov	r22, r5
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0x12a>
 6a2:	6f ef       	ldi	r22, 0xFF	; 255
 6a4:	7f ef       	ldi	r23, 0xFF	; 255
 6a6:	c5 01       	movw	r24, r10
 6a8:	2c 87       	std	Y+12, r18	; 0x0c
 6aa:	36 d1       	rcall	.+620    	; 0x918 <strnlen>
 6ac:	2c 01       	movw	r4, r24
 6ae:	83 01       	movw	r16, r6
 6b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 6b2:	2f 77       	andi	r18, 0x7F	; 127
 6b4:	22 2e       	mov	r2, r18
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <vfprintf+0x168>
 6b8:	38 01       	movw	r6, r16
 6ba:	f2 e0       	ldi	r31, 0x02	; 2
 6bc:	6f 0e       	add	r6, r31
 6be:	71 1c       	adc	r7, r1
 6c0:	f8 01       	movw	r30, r16
 6c2:	a0 80       	ld	r10, Z
 6c4:	b1 80       	ldd	r11, Z+1	; 0x01
 6c6:	26 ff       	sbrs	r18, 6
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <vfprintf+0x154>
 6ca:	65 2d       	mov	r22, r5
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0x158>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	7f ef       	ldi	r23, 0xFF	; 255
 6d4:	c5 01       	movw	r24, r10
 6d6:	2c 87       	std	Y+12, r18	; 0x0c
 6d8:	14 d1       	rcall	.+552    	; 0x902 <strnlen_P>
 6da:	2c 01       	movw	r4, r24
 6dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 6de:	20 68       	ori	r18, 0x80	; 128
 6e0:	22 2e       	mov	r2, r18
 6e2:	83 01       	movw	r16, r6
 6e4:	23 fc       	sbrc	r2, 3
 6e6:	19 c0       	rjmp	.+50     	; 0x71a <vfprintf+0x19e>
 6e8:	83 2d       	mov	r24, r3
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	48 16       	cp	r4, r24
 6ee:	59 06       	cpc	r5, r25
 6f0:	a0 f4       	brcc	.+40     	; 0x71a <vfprintf+0x19e>
 6f2:	b7 01       	movw	r22, r14
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	1a d1       	rcall	.+564    	; 0x92e <fputc>
 6fa:	3a 94       	dec	r3
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <vfprintf+0x16c>
 6fe:	f5 01       	movw	r30, r10
 700:	27 fc       	sbrc	r2, 7
 702:	85 91       	lpm	r24, Z+
 704:	27 fe       	sbrs	r2, 7
 706:	81 91       	ld	r24, Z+
 708:	5f 01       	movw	r10, r30
 70a:	b7 01       	movw	r22, r14
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0f d1       	rcall	.+542    	; 0x92e <fputc>
 710:	31 10       	cpse	r3, r1
 712:	3a 94       	dec	r3
 714:	f1 e0       	ldi	r31, 0x01	; 1
 716:	4f 1a       	sub	r4, r31
 718:	51 08       	sbc	r5, r1
 71a:	41 14       	cp	r4, r1
 71c:	51 04       	cpc	r5, r1
 71e:	79 f7       	brne	.-34     	; 0x6fe <vfprintf+0x182>
 720:	de c0       	rjmp	.+444    	; 0x8de <vfprintf+0x362>
 722:	84 36       	cpi	r24, 0x64	; 100
 724:	11 f0       	breq	.+4      	; 0x72a <vfprintf+0x1ae>
 726:	89 36       	cpi	r24, 0x69	; 105
 728:	31 f5       	brne	.+76     	; 0x776 <vfprintf+0x1fa>
 72a:	f8 01       	movw	r30, r16
 72c:	27 ff       	sbrs	r18, 7
 72e:	07 c0       	rjmp	.+14     	; 0x73e <vfprintf+0x1c2>
 730:	60 81       	ld	r22, Z
 732:	71 81       	ldd	r23, Z+1	; 0x01
 734:	82 81       	ldd	r24, Z+2	; 0x02
 736:	93 81       	ldd	r25, Z+3	; 0x03
 738:	0c 5f       	subi	r16, 0xFC	; 252
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	08 c0       	rjmp	.+16     	; 0x74e <vfprintf+0x1d2>
 73e:	60 81       	ld	r22, Z
 740:	71 81       	ldd	r23, Z+1	; 0x01
 742:	88 27       	eor	r24, r24
 744:	77 fd       	sbrc	r23, 7
 746:	80 95       	com	r24
 748:	98 2f       	mov	r25, r24
 74a:	0e 5f       	subi	r16, 0xFE	; 254
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	2f 76       	andi	r18, 0x6F	; 111
 750:	b2 2e       	mov	r11, r18
 752:	97 ff       	sbrs	r25, 7
 754:	09 c0       	rjmp	.+18     	; 0x768 <vfprintf+0x1ec>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	20 68       	ori	r18, 0x80	; 128
 766:	b2 2e       	mov	r11, r18
 768:	2a e0       	ldi	r18, 0x0A	; 10
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	a4 01       	movw	r20, r8
 76e:	11 d1       	rcall	.+546    	; 0x992 <__ultoa_invert>
 770:	a8 2e       	mov	r10, r24
 772:	a8 18       	sub	r10, r8
 774:	43 c0       	rjmp	.+134    	; 0x7fc <vfprintf+0x280>
 776:	85 37       	cpi	r24, 0x75	; 117
 778:	29 f4       	brne	.+10     	; 0x784 <vfprintf+0x208>
 77a:	2f 7e       	andi	r18, 0xEF	; 239
 77c:	b2 2e       	mov	r11, r18
 77e:	2a e0       	ldi	r18, 0x0A	; 10
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	25 c0       	rjmp	.+74     	; 0x7ce <vfprintf+0x252>
 784:	f2 2f       	mov	r31, r18
 786:	f9 7f       	andi	r31, 0xF9	; 249
 788:	bf 2e       	mov	r11, r31
 78a:	8f 36       	cpi	r24, 0x6F	; 111
 78c:	c1 f0       	breq	.+48     	; 0x7be <vfprintf+0x242>
 78e:	18 f4       	brcc	.+6      	; 0x796 <vfprintf+0x21a>
 790:	88 35       	cpi	r24, 0x58	; 88
 792:	79 f0       	breq	.+30     	; 0x7b2 <vfprintf+0x236>
 794:	ad c0       	rjmp	.+346    	; 0x8f0 <vfprintf+0x374>
 796:	80 37       	cpi	r24, 0x70	; 112
 798:	19 f0       	breq	.+6      	; 0x7a0 <vfprintf+0x224>
 79a:	88 37       	cpi	r24, 0x78	; 120
 79c:	21 f0       	breq	.+8      	; 0x7a6 <vfprintf+0x22a>
 79e:	a8 c0       	rjmp	.+336    	; 0x8f0 <vfprintf+0x374>
 7a0:	2f 2f       	mov	r18, r31
 7a2:	20 61       	ori	r18, 0x10	; 16
 7a4:	b2 2e       	mov	r11, r18
 7a6:	b4 fe       	sbrs	r11, 4
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <vfprintf+0x248>
 7aa:	8b 2d       	mov	r24, r11
 7ac:	84 60       	ori	r24, 0x04	; 4
 7ae:	b8 2e       	mov	r11, r24
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <vfprintf+0x248>
 7b2:	24 ff       	sbrs	r18, 4
 7b4:	0a c0       	rjmp	.+20     	; 0x7ca <vfprintf+0x24e>
 7b6:	9f 2f       	mov	r25, r31
 7b8:	96 60       	ori	r25, 0x06	; 6
 7ba:	b9 2e       	mov	r11, r25
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0x24e>
 7be:	28 e0       	ldi	r18, 0x08	; 8
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <vfprintf+0x252>
 7c4:	20 e1       	ldi	r18, 0x10	; 16
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x252>
 7ca:	20 e1       	ldi	r18, 0x10	; 16
 7cc:	32 e0       	ldi	r19, 0x02	; 2
 7ce:	f8 01       	movw	r30, r16
 7d0:	b7 fe       	sbrs	r11, 7
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <vfprintf+0x266>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0x272>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 5f       	subi	r16, 0xFE	; 254
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	a4 01       	movw	r20, r8
 7f0:	d0 d0       	rcall	.+416    	; 0x992 <__ultoa_invert>
 7f2:	a8 2e       	mov	r10, r24
 7f4:	a8 18       	sub	r10, r8
 7f6:	fb 2d       	mov	r31, r11
 7f8:	ff 77       	andi	r31, 0x7F	; 127
 7fa:	bf 2e       	mov	r11, r31
 7fc:	b6 fe       	sbrs	r11, 6
 7fe:	0b c0       	rjmp	.+22     	; 0x816 <vfprintf+0x29a>
 800:	2b 2d       	mov	r18, r11
 802:	2e 7f       	andi	r18, 0xFE	; 254
 804:	a5 14       	cp	r10, r5
 806:	50 f4       	brcc	.+20     	; 0x81c <vfprintf+0x2a0>
 808:	b4 fe       	sbrs	r11, 4
 80a:	0a c0       	rjmp	.+20     	; 0x820 <vfprintf+0x2a4>
 80c:	b2 fc       	sbrc	r11, 2
 80e:	08 c0       	rjmp	.+16     	; 0x820 <vfprintf+0x2a4>
 810:	2b 2d       	mov	r18, r11
 812:	2e 7e       	andi	r18, 0xEE	; 238
 814:	05 c0       	rjmp	.+10     	; 0x820 <vfprintf+0x2a4>
 816:	7a 2c       	mov	r7, r10
 818:	2b 2d       	mov	r18, r11
 81a:	03 c0       	rjmp	.+6      	; 0x822 <vfprintf+0x2a6>
 81c:	7a 2c       	mov	r7, r10
 81e:	01 c0       	rjmp	.+2      	; 0x822 <vfprintf+0x2a6>
 820:	75 2c       	mov	r7, r5
 822:	24 ff       	sbrs	r18, 4
 824:	0d c0       	rjmp	.+26     	; 0x840 <vfprintf+0x2c4>
 826:	fe 01       	movw	r30, r28
 828:	ea 0d       	add	r30, r10
 82a:	f1 1d       	adc	r31, r1
 82c:	80 81       	ld	r24, Z
 82e:	80 33       	cpi	r24, 0x30	; 48
 830:	11 f4       	brne	.+4      	; 0x836 <vfprintf+0x2ba>
 832:	29 7e       	andi	r18, 0xE9	; 233
 834:	09 c0       	rjmp	.+18     	; 0x848 <vfprintf+0x2cc>
 836:	22 ff       	sbrs	r18, 2
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0x2ca>
 83a:	73 94       	inc	r7
 83c:	73 94       	inc	r7
 83e:	04 c0       	rjmp	.+8      	; 0x848 <vfprintf+0x2cc>
 840:	82 2f       	mov	r24, r18
 842:	86 78       	andi	r24, 0x86	; 134
 844:	09 f0       	breq	.+2      	; 0x848 <vfprintf+0x2cc>
 846:	73 94       	inc	r7
 848:	23 fd       	sbrc	r18, 3
 84a:	12 c0       	rjmp	.+36     	; 0x870 <vfprintf+0x2f4>
 84c:	20 ff       	sbrs	r18, 0
 84e:	06 c0       	rjmp	.+12     	; 0x85c <vfprintf+0x2e0>
 850:	5a 2c       	mov	r5, r10
 852:	73 14       	cp	r7, r3
 854:	18 f4       	brcc	.+6      	; 0x85c <vfprintf+0x2e0>
 856:	53 0c       	add	r5, r3
 858:	57 18       	sub	r5, r7
 85a:	73 2c       	mov	r7, r3
 85c:	73 14       	cp	r7, r3
 85e:	60 f4       	brcc	.+24     	; 0x878 <vfprintf+0x2fc>
 860:	b7 01       	movw	r22, r14
 862:	80 e2       	ldi	r24, 0x20	; 32
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	2c 87       	std	Y+12, r18	; 0x0c
 868:	62 d0       	rcall	.+196    	; 0x92e <fputc>
 86a:	73 94       	inc	r7
 86c:	2c 85       	ldd	r18, Y+12	; 0x0c
 86e:	f6 cf       	rjmp	.-20     	; 0x85c <vfprintf+0x2e0>
 870:	73 14       	cp	r7, r3
 872:	10 f4       	brcc	.+4      	; 0x878 <vfprintf+0x2fc>
 874:	37 18       	sub	r3, r7
 876:	01 c0       	rjmp	.+2      	; 0x87a <vfprintf+0x2fe>
 878:	31 2c       	mov	r3, r1
 87a:	24 ff       	sbrs	r18, 4
 87c:	11 c0       	rjmp	.+34     	; 0x8a0 <vfprintf+0x324>
 87e:	b7 01       	movw	r22, r14
 880:	80 e3       	ldi	r24, 0x30	; 48
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	2c 87       	std	Y+12, r18	; 0x0c
 886:	53 d0       	rcall	.+166    	; 0x92e <fputc>
 888:	2c 85       	ldd	r18, Y+12	; 0x0c
 88a:	22 ff       	sbrs	r18, 2
 88c:	16 c0       	rjmp	.+44     	; 0x8ba <vfprintf+0x33e>
 88e:	21 ff       	sbrs	r18, 1
 890:	03 c0       	rjmp	.+6      	; 0x898 <vfprintf+0x31c>
 892:	88 e5       	ldi	r24, 0x58	; 88
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x320>
 898:	88 e7       	ldi	r24, 0x78	; 120
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	b7 01       	movw	r22, r14
 89e:	0c c0       	rjmp	.+24     	; 0x8b8 <vfprintf+0x33c>
 8a0:	82 2f       	mov	r24, r18
 8a2:	86 78       	andi	r24, 0x86	; 134
 8a4:	51 f0       	breq	.+20     	; 0x8ba <vfprintf+0x33e>
 8a6:	21 fd       	sbrc	r18, 1
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x332>
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <vfprintf+0x334>
 8ae:	8b e2       	ldi	r24, 0x2B	; 43
 8b0:	27 fd       	sbrc	r18, 7
 8b2:	8d e2       	ldi	r24, 0x2D	; 45
 8b4:	b7 01       	movw	r22, r14
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	3a d0       	rcall	.+116    	; 0x92e <fputc>
 8ba:	a5 14       	cp	r10, r5
 8bc:	30 f4       	brcc	.+12     	; 0x8ca <vfprintf+0x34e>
 8be:	b7 01       	movw	r22, r14
 8c0:	80 e3       	ldi	r24, 0x30	; 48
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	34 d0       	rcall	.+104    	; 0x92e <fputc>
 8c6:	5a 94       	dec	r5
 8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <vfprintf+0x33e>
 8ca:	aa 94       	dec	r10
 8cc:	f4 01       	movw	r30, r8
 8ce:	ea 0d       	add	r30, r10
 8d0:	f1 1d       	adc	r31, r1
 8d2:	80 81       	ld	r24, Z
 8d4:	b7 01       	movw	r22, r14
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	2a d0       	rcall	.+84     	; 0x92e <fputc>
 8da:	a1 10       	cpse	r10, r1
 8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <vfprintf+0x34e>
 8de:	33 20       	and	r3, r3
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <vfprintf+0x368>
 8e2:	5d ce       	rjmp	.-838    	; 0x59e <vfprintf+0x22>
 8e4:	b7 01       	movw	r22, r14
 8e6:	80 e2       	ldi	r24, 0x20	; 32
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	21 d0       	rcall	.+66     	; 0x92e <fputc>
 8ec:	3a 94       	dec	r3
 8ee:	f7 cf       	rjmp	.-18     	; 0x8de <vfprintf+0x362>
 8f0:	f7 01       	movw	r30, r14
 8f2:	86 81       	ldd	r24, Z+6	; 0x06
 8f4:	97 81       	ldd	r25, Z+7	; 0x07
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <vfprintf+0x380>
 8f8:	8f ef       	ldi	r24, 0xFF	; 255
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	2c 96       	adiw	r28, 0x0c	; 12
 8fe:	e2 e1       	ldi	r30, 0x12	; 18
 900:	c2 c0       	rjmp	.+388    	; 0xa86 <__epilogue_restores__>

00000902 <strnlen_P>:
 902:	fc 01       	movw	r30, r24
 904:	05 90       	lpm	r0, Z+
 906:	61 50       	subi	r22, 0x01	; 1
 908:	70 40       	sbci	r23, 0x00	; 0
 90a:	01 10       	cpse	r0, r1
 90c:	d8 f7       	brcc	.-10     	; 0x904 <strnlen_P+0x2>
 90e:	80 95       	com	r24
 910:	90 95       	com	r25
 912:	8e 0f       	add	r24, r30
 914:	9f 1f       	adc	r25, r31
 916:	08 95       	ret

00000918 <strnlen>:
 918:	fc 01       	movw	r30, r24
 91a:	61 50       	subi	r22, 0x01	; 1
 91c:	70 40       	sbci	r23, 0x00	; 0
 91e:	01 90       	ld	r0, Z+
 920:	01 10       	cpse	r0, r1
 922:	d8 f7       	brcc	.-10     	; 0x91a <strnlen+0x2>
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	8e 0f       	add	r24, r30
 92a:	9f 1f       	adc	r25, r31
 92c:	08 95       	ret

0000092e <fputc>:
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	18 2f       	mov	r17, r24
 938:	09 2f       	mov	r16, r25
 93a:	eb 01       	movw	r28, r22
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	81 fd       	sbrc	r24, 1
 940:	03 c0       	rjmp	.+6      	; 0x948 <fputc+0x1a>
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	20 c0       	rjmp	.+64     	; 0x988 <fputc+0x5a>
 948:	82 ff       	sbrs	r24, 2
 94a:	10 c0       	rjmp	.+32     	; 0x96c <fputc+0x3e>
 94c:	4e 81       	ldd	r20, Y+6	; 0x06
 94e:	5f 81       	ldd	r21, Y+7	; 0x07
 950:	2c 81       	ldd	r18, Y+4	; 0x04
 952:	3d 81       	ldd	r19, Y+5	; 0x05
 954:	42 17       	cp	r20, r18
 956:	53 07       	cpc	r21, r19
 958:	7c f4       	brge	.+30     	; 0x978 <fputc+0x4a>
 95a:	e8 81       	ld	r30, Y
 95c:	f9 81       	ldd	r31, Y+1	; 0x01
 95e:	9f 01       	movw	r18, r30
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	39 83       	std	Y+1, r19	; 0x01
 966:	28 83       	st	Y, r18
 968:	10 83       	st	Z, r17
 96a:	06 c0       	rjmp	.+12     	; 0x978 <fputc+0x4a>
 96c:	e8 85       	ldd	r30, Y+8	; 0x08
 96e:	f9 85       	ldd	r31, Y+9	; 0x09
 970:	81 2f       	mov	r24, r17
 972:	09 95       	icall
 974:	89 2b       	or	r24, r25
 976:	29 f7       	brne	.-54     	; 0x942 <fputc+0x14>
 978:	2e 81       	ldd	r18, Y+6	; 0x06
 97a:	3f 81       	ldd	r19, Y+7	; 0x07
 97c:	2f 5f       	subi	r18, 0xFF	; 255
 97e:	3f 4f       	sbci	r19, 0xFF	; 255
 980:	3f 83       	std	Y+7, r19	; 0x07
 982:	2e 83       	std	Y+6, r18	; 0x06
 984:	81 2f       	mov	r24, r17
 986:	90 2f       	mov	r25, r16
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	08 95       	ret

00000992 <__ultoa_invert>:
 992:	fa 01       	movw	r30, r20
 994:	aa 27       	eor	r26, r26
 996:	28 30       	cpi	r18, 0x08	; 8
 998:	51 f1       	breq	.+84     	; 0x9ee <__ultoa_invert+0x5c>
 99a:	20 31       	cpi	r18, 0x10	; 16
 99c:	81 f1       	breq	.+96     	; 0x9fe <__ultoa_invert+0x6c>
 99e:	e8 94       	clt
 9a0:	6f 93       	push	r22
 9a2:	6e 7f       	andi	r22, 0xFE	; 254
 9a4:	6e 5f       	subi	r22, 0xFE	; 254
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	af 4f       	sbci	r26, 0xFF	; 255
 9ae:	b1 e0       	ldi	r27, 0x01	; 1
 9b0:	3e d0       	rcall	.+124    	; 0xa2e <__ultoa_invert+0x9c>
 9b2:	b4 e0       	ldi	r27, 0x04	; 4
 9b4:	3c d0       	rcall	.+120    	; 0xa2e <__ultoa_invert+0x9c>
 9b6:	67 0f       	add	r22, r23
 9b8:	78 1f       	adc	r23, r24
 9ba:	89 1f       	adc	r24, r25
 9bc:	9a 1f       	adc	r25, r26
 9be:	a1 1d       	adc	r26, r1
 9c0:	68 0f       	add	r22, r24
 9c2:	79 1f       	adc	r23, r25
 9c4:	8a 1f       	adc	r24, r26
 9c6:	91 1d       	adc	r25, r1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	6a 0f       	add	r22, r26
 9cc:	71 1d       	adc	r23, r1
 9ce:	81 1d       	adc	r24, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	a1 1d       	adc	r26, r1
 9d4:	20 d0       	rcall	.+64     	; 0xa16 <__ultoa_invert+0x84>
 9d6:	09 f4       	brne	.+2      	; 0x9da <__ultoa_invert+0x48>
 9d8:	68 94       	set
 9da:	3f 91       	pop	r19
 9dc:	2a e0       	ldi	r18, 0x0A	; 10
 9de:	26 9f       	mul	r18, r22
 9e0:	11 24       	eor	r1, r1
 9e2:	30 19       	sub	r19, r0
 9e4:	30 5d       	subi	r19, 0xD0	; 208
 9e6:	31 93       	st	Z+, r19
 9e8:	de f6       	brtc	.-74     	; 0x9a0 <__ultoa_invert+0xe>
 9ea:	cf 01       	movw	r24, r30
 9ec:	08 95       	ret
 9ee:	46 2f       	mov	r20, r22
 9f0:	47 70       	andi	r20, 0x07	; 7
 9f2:	40 5d       	subi	r20, 0xD0	; 208
 9f4:	41 93       	st	Z+, r20
 9f6:	b3 e0       	ldi	r27, 0x03	; 3
 9f8:	0f d0       	rcall	.+30     	; 0xa18 <__ultoa_invert+0x86>
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__ultoa_invert+0x5c>
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <__ultoa_invert+0x58>
 9fe:	46 2f       	mov	r20, r22
 a00:	4f 70       	andi	r20, 0x0F	; 15
 a02:	40 5d       	subi	r20, 0xD0	; 208
 a04:	4a 33       	cpi	r20, 0x3A	; 58
 a06:	18 f0       	brcs	.+6      	; 0xa0e <__ultoa_invert+0x7c>
 a08:	49 5d       	subi	r20, 0xD9	; 217
 a0a:	31 fd       	sbrc	r19, 1
 a0c:	40 52       	subi	r20, 0x20	; 32
 a0e:	41 93       	st	Z+, r20
 a10:	02 d0       	rcall	.+4      	; 0xa16 <__ultoa_invert+0x84>
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__ultoa_invert+0x6c>
 a14:	ea cf       	rjmp	.-44     	; 0x9ea <__ultoa_invert+0x58>
 a16:	b4 e0       	ldi	r27, 0x04	; 4
 a18:	a6 95       	lsr	r26
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__ultoa_invert+0x86>
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	61 05       	cpc	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	08 95       	ret
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	0a 2e       	mov	r0, r26
 a34:	06 94       	lsr	r0
 a36:	57 95       	ror	r21
 a38:	47 95       	ror	r20
 a3a:	37 95       	ror	r19
 a3c:	27 95       	ror	r18
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__ultoa_invert+0xa2>
 a42:	62 0f       	add	r22, r18
 a44:	73 1f       	adc	r23, r19
 a46:	84 1f       	adc	r24, r20
 a48:	95 1f       	adc	r25, r21
 a4a:	a0 1d       	adc	r26, r0
 a4c:	08 95       	ret

00000a4e <__prologue_saves__>:
 a4e:	2f 92       	push	r2
 a50:	3f 92       	push	r3
 a52:	4f 92       	push	r4
 a54:	5f 92       	push	r5
 a56:	6f 92       	push	r6
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	ca 1b       	sub	r28, r26
 a78:	db 0b       	sbc	r29, r27
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	f8 94       	cli
 a7e:	de bf       	out	0x3e, r29	; 62
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	cd bf       	out	0x3d, r28	; 61
 a84:	09 94       	ijmp

00000a86 <__epilogue_restores__>:
 a86:	2a 88       	ldd	r2, Y+18	; 0x12
 a88:	39 88       	ldd	r3, Y+17	; 0x11
 a8a:	48 88       	ldd	r4, Y+16	; 0x10
 a8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a90:	7d 84       	ldd	r7, Y+13	; 0x0d
 a92:	8c 84       	ldd	r8, Y+12	; 0x0c
 a94:	9b 84       	ldd	r9, Y+11	; 0x0b
 a96:	aa 84       	ldd	r10, Y+10	; 0x0a
 a98:	b9 84       	ldd	r11, Y+9	; 0x09
 a9a:	c8 84       	ldd	r12, Y+8	; 0x08
 a9c:	df 80       	ldd	r13, Y+7	; 0x07
 a9e:	ee 80       	ldd	r14, Y+6	; 0x06
 aa0:	fd 80       	ldd	r15, Y+5	; 0x05
 aa2:	0c 81       	ldd	r16, Y+4	; 0x04
 aa4:	1b 81       	ldd	r17, Y+3	; 0x03
 aa6:	aa 81       	ldd	r26, Y+2	; 0x02
 aa8:	b9 81       	ldd	r27, Y+1	; 0x01
 aaa:	ce 0f       	add	r28, r30
 aac:	d1 1d       	adc	r29, r1
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	cd bf       	out	0x3d, r28	; 61
 ab8:	ed 01       	movw	r28, r26
 aba:	08 95       	ret

00000abc <_exit>:
 abc:	f8 94       	cli

00000abe <__stop_program>:
 abe:	ff cf       	rjmp	.-2      	; 0xabe <__stop_program>
