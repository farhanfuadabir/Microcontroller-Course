
02. Button Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000dc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b7  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e5  00000000  00000000  00000357  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016e  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ce  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000082e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	//Output for LED
	DDRC = DDRC | 1 << PC0;
  6c:	a0 9a       	sbi	0x14, 0	; 20
	DDRC = DDRC | 1 << PC1;
  6e:	a1 9a       	sbi	0x14, 1	; 20
	
	//Input for Button
	DDRD = DDRD &(~(1 << PD2));
  70:	8a 98       	cbi	0x11, 2	; 17
	DDRD = DDRD &(~(1 << PD3));
  72:	8b 98       	cbi	0x11, 3	; 17
		
    while(1)
    {
		if((PIND &(1 << PD2)) == 0)
  74:	82 99       	sbic	0x10, 2	; 16
  76:	17 c0       	rjmp	.+46     	; 0xa6 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f e7       	ldi	r18, 0x7F	; 127
  7a:	88 e3       	ldi	r24, 0x38	; 56
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		{
			_delay_ms(50);
			
			PORTC = PORTC | 1 << PC0;
  8a:	a8 9a       	sbi	0x15, 0	; 21
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	89 e6       	ldi	r24, 0x69	; 105
  90:	98 e1       	ldi	r25, 0x18	; 24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
			_delay_ms(1000);
			PORTC = PORTC & (~(1 << PC0));
  9e:	a8 98       	cbi	0x15, 0	; 21
			
			while((PIND &(1 << PD2)) == 0);
  a0:	82 9b       	sbis	0x10, 2	; 16
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x34>
  a4:	e7 cf       	rjmp	.-50     	; 0x74 <main+0x8>
		}
		else if((PIND &(1 << PD3)) == 0)
  a6:	83 99       	sbic	0x10, 3	; 16
  a8:	e5 cf       	rjmp	.-54     	; 0x74 <main+0x8>
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
		{
			_delay_ms(50);
			
			PORTC = PORTC | 1 << PC1;
  bc:	a9 9a       	sbi	0x15, 1	; 21
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
			_delay_ms(1000);
			PORTC = PORTC & (~(1 << PC1));
  d0:	a9 98       	cbi	0x15, 1	; 21
			
			while((PIND &(1 << PD3)) == 0);
  d2:	83 9b       	sbis	0x10, 3	; 16
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x66>
  d6:	ce cf       	rjmp	.-100    	; 0x74 <main+0x8>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
