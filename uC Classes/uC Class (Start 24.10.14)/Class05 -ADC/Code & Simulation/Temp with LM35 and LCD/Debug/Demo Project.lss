
Demo Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000522  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002744  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000725  00000000  00000000  00002e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012a0  00000000  00000000  00003597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000825e  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002422  00000000  00000000  0000cd16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000398  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002dec  00000000  00000000  0000f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		LCDsendCommand(0x14);
	}
}

void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	char str[5] = {0, 0, 0, 0, 0};
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	int i = 4;
	
	while(val)
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	{
		str[i] = val % 10;
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
	char str[5] = {0, 0, 0, 0, 0};
	int i = 4;
	
	while(val)
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	{
		str[i] = val % 10;
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
	char str[5] = {0, 0, 0, 0, 0};
	int i = 4;
	
	while(val)
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	{
		str[i] = val % 10;
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
	char str[5] = {0, 0, 0, 0, 0};
	int i = 4;
	
	while(val)
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
	{
		str[i] = val % 10;
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
	char str[5] = {0, 0, 0, 0, 0};
	int i = 4;
	
	while(val)
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
	{
		str[i] = val % 10;
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
		val = val / 10;
		i--;
	}
	
	for(i = (5 - field_length); i < 5; i++)
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_ADC>:
  92:	16 b8       	out	0x06, r1	; 6
	  LDPD7 &= ~(1 << LCD_D7);
  } 

  if((data) & (0b01000000)) 
  {
	  LDPD6 |= 1 << LCD_D6;
  94:	3e 9a       	sbi	0x07, 6	; 7
  else
  {
	  LDPD6 &= ~(1 << LCD_D6);
  }
	  
  if((data) & (0b00100000))
  96:	37 9a       	sbi	0x06, 7	; 6
  98:	31 9a       	sbi	0x06, 1	; 6
  {
	  LDPD5 |= 1 << LCD_D5;
  9a:	37 9a       	sbi	0x06, 7	; 6
  else
  {
	  LDPD5 &= ~(1 << LCD_D5);
  }
  
  if((data) & (0b00010000))
  9c:	08 95       	ret

0000009e <Read_ADC_Voltage>:
  9e:	80 64       	ori	r24, 0x40	; 64
  {
	  LDPD4 |= 1 << LCD_D4;
  }
  else LDPD4 &= ~(1 << LCD_D4);	
  a0:	87 b9       	out	0x07, r24	; 7
}

void LCDsendChar(uint8_t ch)	//Sends Char to LCD
{
	LCDMix_4Bit(ch & 0b11110000);
	LDPRS |= 1 << LCD_RS;
  a2:	36 9a       	sbi	0x06, 6	; 6
	LDPE |= 1 << LCD_E;
  a4:	34 9b       	sbis	0x06, 4	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Read_ADC_Voltage+0x6>
  a8:	34 9a       	sbi	0x06, 4	; 6
  aa:	28 e0       	ldi	r18, 0x08	; 8
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	36 9a       	sbi	0x06, 6	; 6
	_delay_ms(1);

	LDPE &= ~(1 << LCD_E);
  b2:	34 9b       	sbis	0x06, 4	; 6
	LDPRS &= ~(1 << LCD_RS);
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <Read_ADC_Voltage+0x14>
  b6:	34 9a       	sbi	0x06, 4	; 6
  b8:	34 b1       	in	r19, 0x04	; 4
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	98 2f       	mov	r25, r24
  c0:	88 27       	eor	r24, r24

static void LCDMix_4Bit(uint8_t data);

static void LCDMix_4Bit(uint8_t data)
{
  if((data) & (0b10000000)) 
  c2:	83 0f       	add	r24, r19
  c4:	91 1d       	adc	r25, r1
  c6:	68 0f       	add	r22, r24
  c8:	79 1f       	adc	r23, r25
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	89 f7       	brne	.-30     	; 0xb0 <Read_ADC_Voltage+0x12>
  {
	  LDPD7 |= 1 << LCD_D7;
  }	  
  else
  {
	  LDPD7 &= ~(1 << LCD_D7);
  ce:	76 95       	lsr	r23
  } 

  if((data) & (0b01000000)) 
  d0:	67 95       	ror	r22
  d2:	76 95       	lsr	r23
  {
	  LDPD6 |= 1 << LCD_D6;
  d4:	67 95       	ror	r22
  else
  {
	  LDPD6 &= ~(1 << LCD_D6);
  }
	  
  if((data) & (0b00100000))
  d6:	76 95       	lsr	r23
  d8:	67 95       	ror	r22
  {
	  LDPD5 |= 1 << LCD_D5;
  da:	80 e0       	ldi	r24, 0x00	; 0
  else
  {
	  LDPD5 &= ~(1 << LCD_D5);
  }
  
  if((data) & (0b00010000))
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__floatunsisf>
	LDPE &= ~(1 << LCD_E);
	LDPRS &= ~(1 << LCD_RS);
	_delay_ms(1);
		
	LCDMix_4Bit((ch & 0b00001111) << 4);
	LDPRS |= 1 << LCD_RS;
  e2:	20 e0       	ldi	r18, 0x00	; 0
	LDPE |= 1 << LCD_E;
  e4:	30 ec       	ldi	r19, 0xC0	; 192
  e6:	4f e7       	ldi	r20, 0x7F	; 127
  e8:	54 e4       	ldi	r21, 0x44	; 68
  ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divsf3>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
	
	LDPE &= ~(1 << LCD_E);
  f2:	4c e9       	ldi	r20, 0x9C	; 156
	LDPRS &= ~(1 << LCD_RS);
  f4:	55 e4       	ldi	r21, 0x45	; 69
  f6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__mulsf3>
  fa:	08 95       	ret

000000fc <main>:
  fc:	0e 94 49 00 	call	0x92	; 0x92 <Init_ADC>
 100:	0e 94 b8 00 	call	0x170	; 0x170 <USART_Init>
		str[i] = val % 10;
		val = val / 10;
		i--;
	}
	
	for(i = (5 - field_length); i < 5; i++)
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 4f 00 	call	0x9e	; 0x9e <Read_ADC_Voltage>
	{
		LCDsendChar(48 + str[i]);
 10a:	60 93 64 00 	sts	0x0064, r22

static void LCDMix_4Bit(uint8_t data);

static void LCDMix_4Bit(uint8_t data)
{
  if((data) & (0b10000000)) 
 10e:	70 93 65 00 	sts	0x0065, r23
  else
  {
	  LDPD7 &= ~(1 << LCD_D7);
  } 

  if((data) & (0b01000000)) 
 112:	80 93 66 00 	sts	0x0066, r24
  {
	  LDPD6 |= 1 << LCD_D6;
  }
  else
  {
	  LDPD6 &= ~(1 << LCD_D6);
 116:	90 93 67 00 	sts	0x0067, r25
  }
	  
  if((data) & (0b00100000))
 11a:	20 e0       	ldi	r18, 0x00	; 0
  {
	  LDPD5 |= 1 << LCD_D5;
  }
  else
  {
	  LDPD5 &= ~(1 << LCD_D5);
 11c:	30 e0       	ldi	r19, 0x00	; 0
  }
  
  if((data) & (0b00010000))
 11e:	40 e2       	ldi	r20, 0x20	; 32
 120:	51 e4       	ldi	r21, 0x41	; 65
  {
	  LDPD4 |= 1 << LCD_D4;
 122:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divsf3>
  {
	  LDPD5 |= 1 << LCD_D5;
  }
  else
  {
	  LDPD5 &= ~(1 << LCD_D5);
 126:	60 93 60 00 	sts	0x0060, r22
  }
  
  if((data) & (0b00010000))
 12a:	70 93 61 00 	sts	0x0061, r23
  {
	  LDPD4 |= 1 << LCD_D4;
 12e:	80 93 62 00 	sts	0x0062, r24
  {
	  LDPD6 |= 1 << LCD_D6;
  }
  else
  {
	  LDPD6 &= ~(1 << LCD_D6);
 132:	90 93 63 00 	sts	0x0063, r25

static void LCDMix_4Bit(uint8_t data)
{
  if((data) & (0b10000000)) 
  {
	  LDPD7 |= 1 << LCD_D7;
 136:	0e 94 38 01 	call	0x270	; 0x270 <__fixsfsi>
 13a:	dc 01       	movw	r26, r24
	
	for(i = (5 - field_length); i < 5; i++)
	{
		LCDsendChar(48 + str[i]);
	}	
}
 13c:	cb 01       	movw	r24, r22
 13e:	4a e0       	ldi	r20, 0x0A	; 10
 140:	68 e6       	ldi	r22, 0x68	; 104
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__itoa_ncheck>
 148:	88 e6       	ldi	r24, 0x68	; 104
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 c4 00 	call	0x188	; 0x188 <transmitString>
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	0e 94 c0 00 	call	0x180	; 0x180 <transmitByte>
		
		itoa((int)temperature, temperatureText, 10);
		
		transmitString(temperatureText);
		
		TX_NEWLINE;
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	0e 94 c0 00 	call	0x180	; 0x180 <transmitByte>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	89 e6       	ldi	r24, 0x69	; 105
 160:	98 e1       	ldi	r25, 0x18	; 24
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x66>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x70>
 16c:	00 00       	nop
 16e:	ca cf       	rjmp	.-108    	; 0x104 <main+0x8>

00000170 <USART_Init>:
//************************************************
//        Function to initialize USART
//************************************************
void USART_Init()
{
	UCSRB = (1 << RXEN ) | (1 << TXEN );					//Turn on the transmission and reception circuitry
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ1 ) | (1 << UCSZ0 );	// Use 8- bit character sizes
 174:	86 e8       	ldi	r24, 0x86	; 134
 176:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = (BAUD_PRESCALE >> 8);							//Load upper 8- bits of the baud rate value into the high byte of the UBRR register
 178:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;									//Load lower 8 - bits of the baud rate value into the low byte of the UBRR register	
 17a:	83 e3       	ldi	r24, 0x33	; 51
 17c:	89 b9       	out	0x09, r24	; 9
 17e:	08 95       	ret

00000180 <transmitByte>:
//***************************************************
//       Function to transmit a single byte
//***************************************************
void transmitByte(unsigned char data)
{
	while((UCSRA & (1 << UDRE)) == 0) {}; //Do nothing until UDR is ready for more data to be written to it
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <transmitByte>
	
	UDR = data;
 184:	8c b9       	out	0x0c, r24	; 12
 186:	08 95       	ret

00000188 <transmitString>:
//***************************************************
//      Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
	while(*string)
 188:	fc 01       	movw	r30, r24
 18a:	20 81       	ld	r18, Z
 18c:	22 23       	and	r18, r18
 18e:	39 f0       	breq	.+14     	; 0x19e <transmitString+0x16>
 190:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
//       Function to transmit a single byte
//***************************************************
void transmitByte(unsigned char data)
{
	while((UCSRA & (1 << UDRE)) == 0) {}; //Do nothing until UDR is ready for more data to be written to it
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <transmitString+0xa>
	
	UDR = data;
 196:	2c b9       	out	0x0c, r18	; 12
//***************************************************
//      Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
	while(*string)
 198:	21 91       	ld	r18, Z+
 19a:	21 11       	cpse	r18, r1
 19c:	fa cf       	rjmp	.-12     	; 0x192 <transmitString+0xa>
 19e:	08 95       	ret

000001a0 <__divsf3>:
 1a0:	0c d0       	rcall	.+24     	; 0x1ba <__divsf3x>
 1a2:	eb c0       	rjmp	.+470    	; 0x37a <__fp_round>
 1a4:	e3 d0       	rcall	.+454    	; 0x36c <__fp_pscB>
 1a6:	40 f0       	brcs	.+16     	; 0x1b8 <__divsf3+0x18>
 1a8:	da d0       	rcall	.+436    	; 0x35e <__fp_pscA>
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <__divsf3+0x18>
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <__divsf3+0x16>
 1ae:	5f 3f       	cpi	r21, 0xFF	; 255
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <__divsf3+0x18>
 1b2:	cc c0       	rjmp	.+408    	; 0x34c <__fp_inf>
 1b4:	51 11       	cpse	r21, r1
 1b6:	15 c1       	rjmp	.+554    	; 0x3e2 <__fp_szero>
 1b8:	cf c0       	rjmp	.+414    	; 0x358 <__fp_nan>

000001ba <__divsf3x>:
 1ba:	f0 d0       	rcall	.+480    	; 0x39c <__fp_split3>
 1bc:	98 f3       	brcs	.-26     	; 0x1a4 <__divsf3+0x4>

000001be <__divsf3_pse>:
 1be:	99 23       	and	r25, r25
 1c0:	c9 f3       	breq	.-14     	; 0x1b4 <__divsf3+0x14>
 1c2:	55 23       	and	r21, r21
 1c4:	b1 f3       	breq	.-20     	; 0x1b2 <__divsf3+0x12>
 1c6:	95 1b       	sub	r25, r21
 1c8:	55 0b       	sbc	r21, r21
 1ca:	bb 27       	eor	r27, r27
 1cc:	aa 27       	eor	r26, r26
 1ce:	62 17       	cp	r22, r18
 1d0:	73 07       	cpc	r23, r19
 1d2:	84 07       	cpc	r24, r20
 1d4:	38 f0       	brcs	.+14     	; 0x1e4 <__divsf3_pse+0x26>
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	5f 4f       	sbci	r21, 0xFF	; 255
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	44 1f       	adc	r20, r20
 1e0:	aa 1f       	adc	r26, r26
 1e2:	a9 f3       	breq	.-22     	; 0x1ce <__divsf3_pse+0x10>
 1e4:	33 d0       	rcall	.+102    	; 0x24c <__divsf3_pse+0x8e>
 1e6:	0e 2e       	mov	r0, r30
 1e8:	3a f0       	brmi	.+14     	; 0x1f8 <__divsf3_pse+0x3a>
 1ea:	e0 e8       	ldi	r30, 0x80	; 128
 1ec:	30 d0       	rcall	.+96     	; 0x24e <__divsf3_pse+0x90>
 1ee:	91 50       	subi	r25, 0x01	; 1
 1f0:	50 40       	sbci	r21, 0x00	; 0
 1f2:	e6 95       	lsr	r30
 1f4:	00 1c       	adc	r0, r0
 1f6:	ca f7       	brpl	.-14     	; 0x1ea <__divsf3_pse+0x2c>
 1f8:	29 d0       	rcall	.+82     	; 0x24c <__divsf3_pse+0x8e>
 1fa:	fe 2f       	mov	r31, r30
 1fc:	27 d0       	rcall	.+78     	; 0x24c <__divsf3_pse+0x8e>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	88 1f       	adc	r24, r24
 204:	bb 1f       	adc	r27, r27
 206:	26 17       	cp	r18, r22
 208:	37 07       	cpc	r19, r23
 20a:	48 07       	cpc	r20, r24
 20c:	ab 07       	cpc	r26, r27
 20e:	b0 e8       	ldi	r27, 0x80	; 128
 210:	09 f0       	breq	.+2      	; 0x214 <__divsf3_pse+0x56>
 212:	bb 0b       	sbc	r27, r27
 214:	80 2d       	mov	r24, r0
 216:	bf 01       	movw	r22, r30
 218:	ff 27       	eor	r31, r31
 21a:	93 58       	subi	r25, 0x83	; 131
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	2a f0       	brmi	.+10     	; 0x22a <__divsf3_pse+0x6c>
 220:	9e 3f       	cpi	r25, 0xFE	; 254
 222:	51 05       	cpc	r21, r1
 224:	68 f0       	brcs	.+26     	; 0x240 <__divsf3_pse+0x82>
 226:	92 c0       	rjmp	.+292    	; 0x34c <__fp_inf>
 228:	dc c0       	rjmp	.+440    	; 0x3e2 <__fp_szero>
 22a:	5f 3f       	cpi	r21, 0xFF	; 255
 22c:	ec f3       	brlt	.-6      	; 0x228 <__divsf3_pse+0x6a>
 22e:	98 3e       	cpi	r25, 0xE8	; 232
 230:	dc f3       	brlt	.-10     	; 0x228 <__divsf3_pse+0x6a>
 232:	86 95       	lsr	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b7 95       	ror	r27
 23a:	f7 95       	ror	r31
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	c9 f7       	brne	.-14     	; 0x232 <__divsf3_pse+0x74>
 240:	88 0f       	add	r24, r24
 242:	91 1d       	adc	r25, r1
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	97 f9       	bld	r25, 7
 24a:	08 95       	ret
 24c:	e1 e0       	ldi	r30, 0x01	; 1
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	bb 1f       	adc	r27, r27
 256:	62 17       	cp	r22, r18
 258:	73 07       	cpc	r23, r19
 25a:	84 07       	cpc	r24, r20
 25c:	ba 07       	cpc	r27, r26
 25e:	20 f0       	brcs	.+8      	; 0x268 <__divsf3_pse+0xaa>
 260:	62 1b       	sub	r22, r18
 262:	73 0b       	sbc	r23, r19
 264:	84 0b       	sbc	r24, r20
 266:	ba 0b       	sbc	r27, r26
 268:	ee 1f       	adc	r30, r30
 26a:	88 f7       	brcc	.-30     	; 0x24e <__divsf3_pse+0x90>
 26c:	e0 95       	com	r30
 26e:	08 95       	ret

00000270 <__fixsfsi>:
 270:	04 d0       	rcall	.+8      	; 0x27a <__fixunssfsi>
 272:	68 94       	set
 274:	b1 11       	cpse	r27, r1
 276:	b5 c0       	rjmp	.+362    	; 0x3e2 <__fp_szero>
 278:	08 95       	ret

0000027a <__fixunssfsi>:
 27a:	98 d0       	rcall	.+304    	; 0x3ac <__fp_splitA>
 27c:	88 f0       	brcs	.+34     	; 0x2a0 <__fixunssfsi+0x26>
 27e:	9f 57       	subi	r25, 0x7F	; 127
 280:	90 f0       	brcs	.+36     	; 0x2a6 <__fixunssfsi+0x2c>
 282:	b9 2f       	mov	r27, r25
 284:	99 27       	eor	r25, r25
 286:	b7 51       	subi	r27, 0x17	; 23
 288:	a0 f0       	brcs	.+40     	; 0x2b2 <__fixunssfsi+0x38>
 28a:	d1 f0       	breq	.+52     	; 0x2c0 <__fixunssfsi+0x46>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	1a f0       	brmi	.+6      	; 0x29c <__fixunssfsi+0x22>
 296:	ba 95       	dec	r27
 298:	c9 f7       	brne	.-14     	; 0x28c <__fixunssfsi+0x12>
 29a:	12 c0       	rjmp	.+36     	; 0x2c0 <__fixunssfsi+0x46>
 29c:	b1 30       	cpi	r27, 0x01	; 1
 29e:	81 f0       	breq	.+32     	; 0x2c0 <__fixunssfsi+0x46>
 2a0:	9f d0       	rcall	.+318    	; 0x3e0 <__fp_zero>
 2a2:	b1 e0       	ldi	r27, 0x01	; 1
 2a4:	08 95       	ret
 2a6:	9c c0       	rjmp	.+312    	; 0x3e0 <__fp_zero>
 2a8:	67 2f       	mov	r22, r23
 2aa:	78 2f       	mov	r23, r24
 2ac:	88 27       	eor	r24, r24
 2ae:	b8 5f       	subi	r27, 0xF8	; 248
 2b0:	39 f0       	breq	.+14     	; 0x2c0 <__fixunssfsi+0x46>
 2b2:	b9 3f       	cpi	r27, 0xF9	; 249
 2b4:	cc f3       	brlt	.-14     	; 0x2a8 <__fixunssfsi+0x2e>
 2b6:	86 95       	lsr	r24
 2b8:	77 95       	ror	r23
 2ba:	67 95       	ror	r22
 2bc:	b3 95       	inc	r27
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <__fixunssfsi+0x3c>
 2c0:	3e f4       	brtc	.+14     	; 0x2d0 <__fixunssfsi+0x56>
 2c2:	90 95       	com	r25
 2c4:	80 95       	com	r24
 2c6:	70 95       	com	r23
 2c8:	61 95       	neg	r22
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	8f 4f       	sbci	r24, 0xFF	; 255
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	08 95       	ret

000002d2 <__floatunsisf>:
 2d2:	e8 94       	clt
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <__floatsisf+0x12>

000002d6 <__floatsisf>:
 2d6:	97 fb       	bst	r25, 7
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__floatsisf+0x12>
 2da:	90 95       	com	r25
 2dc:	80 95       	com	r24
 2de:	70 95       	com	r23
 2e0:	61 95       	neg	r22
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	99 23       	and	r25, r25
 2ea:	a9 f0       	breq	.+42     	; 0x316 <__floatsisf+0x40>
 2ec:	f9 2f       	mov	r31, r25
 2ee:	96 e9       	ldi	r25, 0x96	; 150
 2f0:	bb 27       	eor	r27, r27
 2f2:	93 95       	inc	r25
 2f4:	f6 95       	lsr	r31
 2f6:	87 95       	ror	r24
 2f8:	77 95       	ror	r23
 2fa:	67 95       	ror	r22
 2fc:	b7 95       	ror	r27
 2fe:	f1 11       	cpse	r31, r1
 300:	f8 cf       	rjmp	.-16     	; 0x2f2 <__floatsisf+0x1c>
 302:	fa f4       	brpl	.+62     	; 0x342 <__floatsisf+0x6c>
 304:	bb 0f       	add	r27, r27
 306:	11 f4       	brne	.+4      	; 0x30c <__floatsisf+0x36>
 308:	60 ff       	sbrs	r22, 0
 30a:	1b c0       	rjmp	.+54     	; 0x342 <__floatsisf+0x6c>
 30c:	6f 5f       	subi	r22, 0xFF	; 255
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	16 c0       	rjmp	.+44     	; 0x342 <__floatsisf+0x6c>
 316:	88 23       	and	r24, r24
 318:	11 f0       	breq	.+4      	; 0x31e <__floatsisf+0x48>
 31a:	96 e9       	ldi	r25, 0x96	; 150
 31c:	11 c0       	rjmp	.+34     	; 0x340 <__floatsisf+0x6a>
 31e:	77 23       	and	r23, r23
 320:	21 f0       	breq	.+8      	; 0x32a <__floatsisf+0x54>
 322:	9e e8       	ldi	r25, 0x8E	; 142
 324:	87 2f       	mov	r24, r23
 326:	76 2f       	mov	r23, r22
 328:	05 c0       	rjmp	.+10     	; 0x334 <__floatsisf+0x5e>
 32a:	66 23       	and	r22, r22
 32c:	71 f0       	breq	.+28     	; 0x34a <__floatsisf+0x74>
 32e:	96 e8       	ldi	r25, 0x86	; 134
 330:	86 2f       	mov	r24, r22
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	2a f0       	brmi	.+10     	; 0x342 <__floatsisf+0x6c>
 338:	9a 95       	dec	r25
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	da f7       	brpl	.-10     	; 0x338 <__floatsisf+0x62>
 342:	88 0f       	add	r24, r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	97 f9       	bld	r25, 7
 34a:	08 95       	ret

0000034c <__fp_inf>:
 34c:	97 f9       	bld	r25, 7
 34e:	9f 67       	ori	r25, 0x7F	; 127
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	08 95       	ret

00000358 <__fp_nan>:
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	80 ec       	ldi	r24, 0xC0	; 192
 35c:	08 95       	ret

0000035e <__fp_pscA>:
 35e:	00 24       	eor	r0, r0
 360:	0a 94       	dec	r0
 362:	16 16       	cp	r1, r22
 364:	17 06       	cpc	r1, r23
 366:	18 06       	cpc	r1, r24
 368:	09 06       	cpc	r0, r25
 36a:	08 95       	ret

0000036c <__fp_pscB>:
 36c:	00 24       	eor	r0, r0
 36e:	0a 94       	dec	r0
 370:	12 16       	cp	r1, r18
 372:	13 06       	cpc	r1, r19
 374:	14 06       	cpc	r1, r20
 376:	05 06       	cpc	r0, r21
 378:	08 95       	ret

0000037a <__fp_round>:
 37a:	09 2e       	mov	r0, r25
 37c:	03 94       	inc	r0
 37e:	00 0c       	add	r0, r0
 380:	11 f4       	brne	.+4      	; 0x386 <__fp_round+0xc>
 382:	88 23       	and	r24, r24
 384:	52 f0       	brmi	.+20     	; 0x39a <__fp_round+0x20>
 386:	bb 0f       	add	r27, r27
 388:	40 f4       	brcc	.+16     	; 0x39a <__fp_round+0x20>
 38a:	bf 2b       	or	r27, r31
 38c:	11 f4       	brne	.+4      	; 0x392 <__fp_round+0x18>
 38e:	60 ff       	sbrs	r22, 0
 390:	04 c0       	rjmp	.+8      	; 0x39a <__fp_round+0x20>
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8f 4f       	sbci	r24, 0xFF	; 255
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__fp_split3>:
 39c:	57 fd       	sbrc	r21, 7
 39e:	90 58       	subi	r25, 0x80	; 128
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	59 f0       	breq	.+22     	; 0x3bc <__fp_splitA+0x10>
 3a6:	5f 3f       	cpi	r21, 0xFF	; 255
 3a8:	71 f0       	breq	.+28     	; 0x3c6 <__fp_splitA+0x1a>
 3aa:	47 95       	ror	r20

000003ac <__fp_splitA>:
 3ac:	88 0f       	add	r24, r24
 3ae:	97 fb       	bst	r25, 7
 3b0:	99 1f       	adc	r25, r25
 3b2:	61 f0       	breq	.+24     	; 0x3cc <__fp_splitA+0x20>
 3b4:	9f 3f       	cpi	r25, 0xFF	; 255
 3b6:	79 f0       	breq	.+30     	; 0x3d6 <__fp_splitA+0x2a>
 3b8:	87 95       	ror	r24
 3ba:	08 95       	ret
 3bc:	12 16       	cp	r1, r18
 3be:	13 06       	cpc	r1, r19
 3c0:	14 06       	cpc	r1, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	f2 cf       	rjmp	.-28     	; 0x3aa <__fp_split3+0xe>
 3c6:	46 95       	lsr	r20
 3c8:	f1 df       	rcall	.-30     	; 0x3ac <__fp_splitA>
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <__fp_splitA+0x30>
 3cc:	16 16       	cp	r1, r22
 3ce:	17 06       	cpc	r1, r23
 3d0:	18 06       	cpc	r1, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	f1 cf       	rjmp	.-30     	; 0x3b8 <__fp_splitA+0xc>
 3d6:	86 95       	lsr	r24
 3d8:	71 05       	cpc	r23, r1
 3da:	61 05       	cpc	r22, r1
 3dc:	08 94       	sec
 3de:	08 95       	ret

000003e0 <__fp_zero>:
 3e0:	e8 94       	clt

000003e2 <__fp_szero>:
 3e2:	bb 27       	eor	r27, r27
 3e4:	66 27       	eor	r22, r22
 3e6:	77 27       	eor	r23, r23
 3e8:	cb 01       	movw	r24, r22
 3ea:	97 f9       	bld	r25, 7
 3ec:	08 95       	ret

000003ee <__mulsf3>:
 3ee:	0b d0       	rcall	.+22     	; 0x406 <__mulsf3x>
 3f0:	c4 cf       	rjmp	.-120    	; 0x37a <__fp_round>
 3f2:	b5 df       	rcall	.-150    	; 0x35e <__fp_pscA>
 3f4:	28 f0       	brcs	.+10     	; 0x400 <__mulsf3+0x12>
 3f6:	ba df       	rcall	.-140    	; 0x36c <__fp_pscB>
 3f8:	18 f0       	brcs	.+6      	; 0x400 <__mulsf3+0x12>
 3fa:	95 23       	and	r25, r21
 3fc:	09 f0       	breq	.+2      	; 0x400 <__mulsf3+0x12>
 3fe:	a6 cf       	rjmp	.-180    	; 0x34c <__fp_inf>
 400:	ab cf       	rjmp	.-170    	; 0x358 <__fp_nan>
 402:	11 24       	eor	r1, r1
 404:	ee cf       	rjmp	.-36     	; 0x3e2 <__fp_szero>

00000406 <__mulsf3x>:
 406:	ca df       	rcall	.-108    	; 0x39c <__fp_split3>
 408:	a0 f3       	brcs	.-24     	; 0x3f2 <__mulsf3+0x4>

0000040a <__mulsf3_pse>:
 40a:	95 9f       	mul	r25, r21
 40c:	d1 f3       	breq	.-12     	; 0x402 <__mulsf3+0x14>
 40e:	95 0f       	add	r25, r21
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	55 1f       	adc	r21, r21
 414:	62 9f       	mul	r22, r18
 416:	f0 01       	movw	r30, r0
 418:	72 9f       	mul	r23, r18
 41a:	bb 27       	eor	r27, r27
 41c:	f0 0d       	add	r31, r0
 41e:	b1 1d       	adc	r27, r1
 420:	63 9f       	mul	r22, r19
 422:	aa 27       	eor	r26, r26
 424:	f0 0d       	add	r31, r0
 426:	b1 1d       	adc	r27, r1
 428:	aa 1f       	adc	r26, r26
 42a:	64 9f       	mul	r22, r20
 42c:	66 27       	eor	r22, r22
 42e:	b0 0d       	add	r27, r0
 430:	a1 1d       	adc	r26, r1
 432:	66 1f       	adc	r22, r22
 434:	82 9f       	mul	r24, r18
 436:	22 27       	eor	r18, r18
 438:	b0 0d       	add	r27, r0
 43a:	a1 1d       	adc	r26, r1
 43c:	62 1f       	adc	r22, r18
 43e:	73 9f       	mul	r23, r19
 440:	b0 0d       	add	r27, r0
 442:	a1 1d       	adc	r26, r1
 444:	62 1f       	adc	r22, r18
 446:	83 9f       	mul	r24, r19
 448:	a0 0d       	add	r26, r0
 44a:	61 1d       	adc	r22, r1
 44c:	22 1f       	adc	r18, r18
 44e:	74 9f       	mul	r23, r20
 450:	33 27       	eor	r19, r19
 452:	a0 0d       	add	r26, r0
 454:	61 1d       	adc	r22, r1
 456:	23 1f       	adc	r18, r19
 458:	84 9f       	mul	r24, r20
 45a:	60 0d       	add	r22, r0
 45c:	21 1d       	adc	r18, r1
 45e:	82 2f       	mov	r24, r18
 460:	76 2f       	mov	r23, r22
 462:	6a 2f       	mov	r22, r26
 464:	11 24       	eor	r1, r1
 466:	9f 57       	subi	r25, 0x7F	; 127
 468:	50 40       	sbci	r21, 0x00	; 0
 46a:	8a f0       	brmi	.+34     	; 0x48e <__stack+0x2f>
 46c:	e1 f0       	breq	.+56     	; 0x4a6 <__stack+0x47>
 46e:	88 23       	and	r24, r24
 470:	4a f0       	brmi	.+18     	; 0x484 <__stack+0x25>
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	bb 1f       	adc	r27, r27
 478:	66 1f       	adc	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	91 50       	subi	r25, 0x01	; 1
 480:	50 40       	sbci	r21, 0x00	; 0
 482:	a9 f7       	brne	.-22     	; 0x46e <__stack+0xf>
 484:	9e 3f       	cpi	r25, 0xFE	; 254
 486:	51 05       	cpc	r21, r1
 488:	70 f0       	brcs	.+28     	; 0x4a6 <__stack+0x47>
 48a:	60 cf       	rjmp	.-320    	; 0x34c <__fp_inf>
 48c:	aa cf       	rjmp	.-172    	; 0x3e2 <__fp_szero>
 48e:	5f 3f       	cpi	r21, 0xFF	; 255
 490:	ec f3       	brlt	.-6      	; 0x48c <__stack+0x2d>
 492:	98 3e       	cpi	r25, 0xE8	; 232
 494:	dc f3       	brlt	.-10     	; 0x48c <__stack+0x2d>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b7 95       	ror	r27
 49e:	f7 95       	ror	r31
 4a0:	e7 95       	ror	r30
 4a2:	9f 5f       	subi	r25, 0xFF	; 255
 4a4:	c1 f7       	brne	.-16     	; 0x496 <__stack+0x37>
 4a6:	fe 2b       	or	r31, r30
 4a8:	88 0f       	add	r24, r24
 4aa:	91 1d       	adc	r25, r1
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	97 f9       	bld	r25, 7
 4b2:	08 95       	ret

000004b4 <__itoa_ncheck>:
 4b4:	bb 27       	eor	r27, r27
 4b6:	4a 30       	cpi	r20, 0x0A	; 10
 4b8:	31 f4       	brne	.+12     	; 0x4c6 <__itoa_ncheck+0x12>
 4ba:	99 23       	and	r25, r25
 4bc:	22 f4       	brpl	.+8      	; 0x4c6 <__itoa_ncheck+0x12>
 4be:	bd e2       	ldi	r27, 0x2D	; 45
 4c0:	90 95       	com	r25
 4c2:	81 95       	neg	r24
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__utoa_common>

000004ca <__utoa_ncheck>:
 4ca:	bb 27       	eor	r27, r27

000004cc <__utoa_common>:
 4cc:	fb 01       	movw	r30, r22
 4ce:	55 27       	eor	r21, r21
 4d0:	aa 27       	eor	r26, r26
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	aa 1f       	adc	r26, r26
 4d8:	a4 17       	cp	r26, r20
 4da:	10 f0       	brcs	.+4      	; 0x4e0 <__utoa_common+0x14>
 4dc:	a4 1b       	sub	r26, r20
 4de:	83 95       	inc	r24
 4e0:	50 51       	subi	r21, 0x10	; 16
 4e2:	b9 f7       	brne	.-18     	; 0x4d2 <__utoa_common+0x6>
 4e4:	a0 5d       	subi	r26, 0xD0	; 208
 4e6:	aa 33       	cpi	r26, 0x3A	; 58
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <__utoa_common+0x20>
 4ea:	a9 5d       	subi	r26, 0xD9	; 217
 4ec:	a1 93       	st	Z+, r26
 4ee:	00 97       	sbiw	r24, 0x00	; 0
 4f0:	79 f7       	brne	.-34     	; 0x4d0 <__utoa_common+0x4>
 4f2:	b1 11       	cpse	r27, r1
 4f4:	b1 93       	st	Z+, r27
 4f6:	11 92       	st	Z+, r1
 4f8:	cb 01       	movw	r24, r22
 4fa:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <strrev>

000004fe <strrev>:
 4fe:	dc 01       	movw	r26, r24
 500:	fc 01       	movw	r30, r24
 502:	67 2f       	mov	r22, r23
 504:	71 91       	ld	r23, Z+
 506:	77 23       	and	r23, r23
 508:	e1 f7       	brne	.-8      	; 0x502 <strrev+0x4>
 50a:	32 97       	sbiw	r30, 0x02	; 2
 50c:	04 c0       	rjmp	.+8      	; 0x516 <strrev+0x18>
 50e:	7c 91       	ld	r23, X
 510:	6d 93       	st	X+, r22
 512:	70 83       	st	Z, r23
 514:	62 91       	ld	r22, -Z
 516:	ae 17       	cp	r26, r30
 518:	bf 07       	cpc	r27, r31
 51a:	c8 f3       	brcs	.-14     	; 0x50e <strrev+0x10>
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
