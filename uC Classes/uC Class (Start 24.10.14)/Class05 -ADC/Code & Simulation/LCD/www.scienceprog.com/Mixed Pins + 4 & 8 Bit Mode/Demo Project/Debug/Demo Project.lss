
Demo Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000586  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001075  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038b  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007df  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	63 c0       	rjmp	.+198    	; 0xca <__bad_interrupt>
   4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
   6:	61 c0       	rjmp	.+194    	; 0xca <__bad_interrupt>
   8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
   a:	5f c0       	rjmp	.+190    	; 0xca <__bad_interrupt>
   c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
   e:	5d c0       	rjmp	.+186    	; 0xca <__bad_interrupt>
  10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
  12:	5b c0       	rjmp	.+182    	; 0xca <__bad_interrupt>
  14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
  16:	59 c0       	rjmp	.+178    	; 0xca <__bad_interrupt>
  18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
  1a:	57 c0       	rjmp	.+174    	; 0xca <__bad_interrupt>
  1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
  1e:	55 c0       	rjmp	.+170    	; 0xca <__bad_interrupt>
  20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
  22:	53 c0       	rjmp	.+166    	; 0xca <__bad_interrupt>
  24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>

00000026 <backslash>:
  26:	00 10 08 04 02 01 00 00                             ........

0000002e <LCDanimation>:
  2e:	4c 43 44 20 61 6e 69 6d 61 74 69 6f 6e 00           LCD animation.

0000003c <LCDprogress>:
  3c:	4c 6f 61 64 69 6e 67 2e 2e 2e 00                    Loading....

00000047 <LCDwelcomeln1>:
  47:	41 56 52 20 4c 43 44 20 44 45 4d 4f 00              AVR LCD DEMO.

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e6 e8       	ldi	r30, 0x86	; 134
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a0 36       	cpi	r26, 0x60	; 96
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a0 e6       	ldi	r26, 0x60	; 96
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a0 36       	cpi	r26, 0x60	; 96
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	6d d0       	rcall	.+218    	; 0x1a2 <main>
  c8:	5c c2       	rjmp	.+1208   	; 0x582 <_exit>

000000ca <__bad_interrupt>:
  ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <delay1s>:
//Additional custom LCD characters
const uint8_t backslash[8] PROGMEM = {0b00000000, 0b00010000, 0b00001000, 0b00000100, 0b00000010, 0b00000001, 0b00000000, 0b00000000};	//Back slash 

//Delay 1s
void delay1s(void)
{
  cc:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef e1       	ldi	r30, 0x1F	; 31
  d0:	fe e4       	ldi	r31, 0x4E	; 78
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <delay1s+0x6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <delay1s+0xc>
  d8:	00 00       	nop
  da:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	for(i = 0; i < 100; i++)
  dc:	c1 f7       	brne	.-16     	; 0xce <delay1s+0x2>
	{
		_delay_ms(10);
	}
}
  de:	08 95       	ret

000000e0 <progress>:

//Progress bar
void progress(void)
{
  e0:	cf 93       	push	r28
	LCDclr();
  e2:	cb d0       	rcall	.+406    	; 0x27a <LCDclr>
	
	CopyStringtoLCD(LCDwelcomeln1, 3, 0);
  e4:	87 e4       	ldi	r24, 0x47	; 71
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	63 e0       	ldi	r22, 0x03	; 3
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	ef d0       	rcall	.+478    	; 0x2cc <CopyStringtoLCD>
	delay1s();
  ee:	ee df       	rcall	.-36     	; 0xcc <delay1s>
	
	LCDclr();
  f0:	c4 d0       	rcall	.+392    	; 0x27a <LCDclr>
	
	CopyStringtoLCD(LCDprogress, 3, 0);
  f2:	8c e3       	ldi	r24, 0x3C	; 60
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	e8 d0       	rcall	.+464    	; 0x2cc <CopyStringtoLCD>
	
	for(uint8_t i = 0; i < 255; i++)
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <progress+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <progress+0x28>
 108:	00 00       	nop
	{
		_delay_ms(10);
		LCDGotoXY(0, 1);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	d0 d0       	rcall	.+416    	; 0x2b0 <LCDGotoXY>
		LCDprogressBar(i, 255, 16);
 110:	8c 2f       	mov	r24, r28
 112:	6f ef       	ldi	r22, 0xFF	; 255
 114:	40 e1       	ldi	r20, 0x10	; 16
 116:	bb d1       	rcall	.+886    	; 0x48e <LCDprogressBar>
	
	LCDclr();
	
	CopyStringtoLCD(LCDprogress, 3, 0);
	
	for(uint8_t i = 0; i < 255; i++)
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	cf 3f       	cpi	r28, 0xFF	; 255
 11c:	81 f7       	brne	.-32     	; 0xfe <progress+0x1e>
	{
		_delay_ms(10);
		LCDGotoXY(0, 1);
		LCDprogressBar(i, 255, 16);
	}
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <demoanimation>:

//Animation
void demoanimation(void)
{
 122:	cf 93       	push	r28
	LCDclr();
 124:	aa d0       	rcall	.+340    	; 0x27a <LCDclr>
	
	LCDdefinechar(backslash, 0);
 126:	86 e2       	ldi	r24, 0x26	; 38
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	eb d0       	rcall	.+470    	; 0x304 <LCDdefinechar>
	
	CopyStringtoLCD(LCDanimation, 0, 0);
 12e:	8e e2       	ldi	r24, 0x2E	; 46
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	ca d0       	rcall	.+404    	; 0x2cc <CopyStringtoLCD>
 138:	c3 e0       	ldi	r28, 0x03	; 3
	
	for(uint8_t i = 0; i < 3; i++)
	{
		LCDGotoXY(8, 1); LCDsendChar(0); delay1s();
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	b8 d0       	rcall	.+368    	; 0x2b0 <LCDGotoXY>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	4b d0       	rcall	.+150    	; 0x1da <LCDsendChar>
 144:	c3 df       	rcall	.-122    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('-'); delay1s();
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	b2 d0       	rcall	.+356    	; 0x2b0 <LCDGotoXY>
 14c:	8d e2       	ldi	r24, 0x2D	; 45
 14e:	45 d0       	rcall	.+138    	; 0x1da <LCDsendChar>
 150:	bd df       	rcall	.-134    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('/'); delay1s();
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	ac d0       	rcall	.+344    	; 0x2b0 <LCDGotoXY>
 158:	8f e2       	ldi	r24, 0x2F	; 47
 15a:	3f d0       	rcall	.+126    	; 0x1da <LCDsendChar>
 15c:	b7 df       	rcall	.-146    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('|'); delay1s();
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	a6 d0       	rcall	.+332    	; 0x2b0 <LCDGotoXY>
 164:	8c e7       	ldi	r24, 0x7C	; 124
 166:	39 d0       	rcall	.+114    	; 0x1da <LCDsendChar>
 168:	b1 df       	rcall	.-158    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar(8); delay1s();
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	a0 d0       	rcall	.+320    	; 0x2b0 <LCDGotoXY>
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	33 d0       	rcall	.+102    	; 0x1da <LCDsendChar>
 174:	ab df       	rcall	.-170    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('-'); delay1s();
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	9a d0       	rcall	.+308    	; 0x2b0 <LCDGotoXY>
 17c:	8d e2       	ldi	r24, 0x2D	; 45
 17e:	2d d0       	rcall	.+90     	; 0x1da <LCDsendChar>
 180:	a5 df       	rcall	.-182    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('/'); delay1s();
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	94 d0       	rcall	.+296    	; 0x2b0 <LCDGotoXY>
 188:	8f e2       	ldi	r24, 0x2F	; 47
 18a:	27 d0       	rcall	.+78     	; 0x1da <LCDsendChar>
 18c:	9f df       	rcall	.-194    	; 0xcc <delay1s>
		LCDGotoXY(8, 1); LCDsendChar('|'); delay1s();
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8e d0       	rcall	.+284    	; 0x2b0 <LCDGotoXY>
 194:	8c e7       	ldi	r24, 0x7C	; 124
 196:	21 d0       	rcall	.+66     	; 0x1da <LCDsendChar>
 198:	99 df       	rcall	.-206    	; 0xcc <delay1s>
 19a:	c1 50       	subi	r28, 0x01	; 1
	
	LCDdefinechar(backslash, 0);
	
	CopyStringtoLCD(LCDanimation, 0, 0);
	
	for(uint8_t i = 0; i < 3; i++)
 19c:	71 f6       	brne	.-100    	; 0x13a <demoanimation+0x18>
		LCDGotoXY(8, 1); LCDsendChar(8); delay1s();
		LCDGotoXY(8, 1); LCDsendChar('-'); delay1s();
		LCDGotoXY(8, 1); LCDsendChar('/'); delay1s();
		LCDGotoXY(8, 1); LCDsendChar('|'); delay1s();
	}
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:


int main(void)
{
	LCDinit();	//Initialize the LCD 	
 1a2:	d3 d0       	rcall	.+422    	; 0x34a <LCDinit>
	LCDclr();	//Clears LCD
 1a4:	6a d0       	rcall	.+212    	; 0x27a <LCDclr>
	
	while(1) 
	{
		progress();
 1a6:	9c df       	rcall	.-200    	; 0xe0 <progress>
		delay1s();
 1a8:	91 df       	rcall	.-222    	; 0xcc <delay1s>
		demoanimation();
 1aa:	bb df       	rcall	.-138    	; 0x122 <demoanimation>
		delay1s();
 1ac:	8f df       	rcall	.-226    	; 0xcc <delay1s>
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <main+0x4>

000001b0 <LCDMix_4Bit>:
	//for high nibble use mask data & 0b11110000
	//for low nibble use (data & 0b00001111)<<4
	
	static void LCDMix_4Bit(uint8_t data)
	{
	  if((data) & (0b10000000)) 
 1b0:	88 23       	and	r24, r24
 1b2:	14 f4       	brge	.+4      	; 0x1b8 <LCDMix_4Bit+0x8>
	  {
		  LDPD7 |= 1 << LCD_D7;
 1b4:	c0 9a       	sbi	0x18, 0	; 24
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <LCDMix_4Bit+0xa>
	  }	  
	  else
	  {
		  LDPD7 &= ~(1 << LCD_D7);
 1b8:	c0 98       	cbi	0x18, 0	; 24
	  } 

	  if((data) & (0b01000000)) 
 1ba:	86 ff       	sbrs	r24, 6
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <LCDMix_4Bit+0x12>
	  {
		  LDPD6 |= 1 << LCD_D6;
 1be:	96 9a       	sbi	0x12, 6	; 18
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <LCDMix_4Bit+0x14>
	  }
	  else
	  {
		  LDPD6 &= ~(1 << LCD_D6);
 1c2:	96 98       	cbi	0x12, 6	; 18
	  }
	  
	  if((data) & (0b00100000))
 1c4:	85 ff       	sbrs	r24, 5
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <LCDMix_4Bit+0x1c>
	  {
		  LDPD5 |= 1 << LCD_D5;
 1c8:	aa 9a       	sbi	0x15, 2	; 21
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <LCDMix_4Bit+0x1e>
	  }
	  else
	  {
		  LDPD5 &= ~(1 << LCD_D5);
 1cc:	aa 98       	cbi	0x15, 2	; 21
	  }
	  
	  if((data) & (0b00010000))
 1ce:	84 ff       	sbrs	r24, 4
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCDMix_4Bit+0x26>
	  {
		  LDPD4 |= 1 << LCD_D4;
 1d2:	94 9a       	sbi	0x12, 4	; 18
 1d4:	08 95       	ret
	  }
	  else LDPD4 &= ~(1 << LCD_D4);	
 1d6:	94 98       	cbi	0x12, 4	; 18
 1d8:	08 95       	ret

000001da <LCDsendChar>:
		ch = ch + 8;
	}
}

void LCDsendChar(uint8_t ch)	//Sends Char to LCD
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
		LCP &= ~(1 << LCD_RS);
		_delay_ms(1);
	#endif
	
	#ifdef LCD_4BIT_M
		LCDMix_4Bit(ch & 0b11110000);
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	e7 df       	rcall	.-50     	; 0x1b0 <LCDMix_4Bit>
		LDPRS |= 1 << LCD_RS;
 1e2:	c5 9a       	sbi	0x18, 5	; 24
		LDPE |= 1 << LCD_E;
 1e4:	92 9a       	sbi	0x12, 2	; 18
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDsendChar+0x10>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCDsendChar+0x16>
 1f0:	00 00       	nop
		_delay_ms(1);

		LDPE &= ~(1 << LCD_E);
 1f2:	92 98       	cbi	0x12, 2	; 18
		LDPRS &= ~(1 << LCD_RS);
 1f4:	c5 98       	cbi	0x18, 5	; 24
 1f6:	8f ec       	ldi	r24, 0xCF	; 207
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDsendChar+0x20>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCDsendChar+0x26>
 200:	00 00       	nop
		_delay_ms(1);
		
		LCDMix_4Bit((ch & 0b00001111) << 4);
 202:	8c 2f       	mov	r24, r28
 204:	82 95       	swap	r24
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	d3 df       	rcall	.-90     	; 0x1b0 <LCDMix_4Bit>
		LDPRS |= 1 << LCD_RS;
 20a:	c5 9a       	sbi	0x18, 5	; 24
		LDPE |= 1 << LCD_E;
 20c:	92 9a       	sbi	0x12, 2	; 18
 20e:	8f ec       	ldi	r24, 0xCF	; 207
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDsendChar+0x38>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCDsendChar+0x3e>
 218:	00 00       	nop
		_delay_ms(1);
	
		LDPE &= ~(1 << LCD_E);
 21a:	92 98       	cbi	0x12, 2	; 18
		LDPRS &= ~(1 << LCD_RS);
 21c:	c5 98       	cbi	0x18, 5	; 24
 21e:	8f ec       	ldi	r24, 0xCF	; 207
 220:	97 e0       	ldi	r25, 0x07	; 7
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDsendChar+0x48>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCDsendChar+0x4e>
 228:	00 00       	nop
	
		LDPE &= ~(1 << LCD_E);
		LDPRS &=~(1 << LCD_RS);
		_delay_ms(1);	
	#endif
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <LCDsendCommand>:

void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
		LCP &= ~(1 << LCD_E);
		_delay_ms(1);	
	#endif

	#ifdef LCD_4BIT_M
		LCDMix_4Bit(cmd & 0b11110000);
 232:	80 7f       	andi	r24, 0xF0	; 240
 234:	bd df       	rcall	.-134    	; 0x1b0 <LCDMix_4Bit>
		LDPE |= 1 << LCD_E;		
 236:	92 9a       	sbi	0x12, 2	; 18
 238:	8f ec       	ldi	r24, 0xCF	; 207
 23a:	97 e0       	ldi	r25, 0x07	; 7
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCDsendCommand+0xe>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCDsendCommand+0x14>
 242:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
 244:	92 98       	cbi	0x12, 2	; 18
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDsendCommand+0x1c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCDsendCommand+0x22>
 250:	00 00       	nop
		_delay_ms(1);

		LCDMix_4Bit((cmd & 0b00001111) << 4);
 252:	8c 2f       	mov	r24, r28
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	ab df       	rcall	.-170    	; 0x1b0 <LCDMix_4Bit>
		LDPE |= 1 << LCD_E;		
 25a:	92 9a       	sbi	0x12, 2	; 18
 25c:	8f ec       	ldi	r24, 0xCF	; 207
 25e:	97 e0       	ldi	r25, 0x07	; 7
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCDsendCommand+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCDsendCommand+0x38>
 266:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
 268:	92 98       	cbi	0x12, 2	; 18
 26a:	8f ec       	ldi	r24, 0xCF	; 207
 26c:	97 e0       	ldi	r25, 0x07	; 7
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCDsendCommand+0x40>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCDsendCommand+0x46>
 274:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
		_delay_ms(1);	
	#endif
}	
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <LCDclr>:
	
void LCDclr(void)	//Clears LCD
{
	LCDsendCommand(1 << LCD_CLR);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	d8 df       	rcall	.-80     	; 0x22e <LCDsendCommand>
}
 27e:	08 95       	ret

00000280 <LCDhome>:

void LCDhome(void)	//LCD cursor home
{
	LCDsendCommand( 1 << LCD_HOME);
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	d5 df       	rcall	.-86     	; 0x22e <LCDsendCommand>
}
 284:	08 95       	ret

00000286 <LCDstring>:

void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	16 2f       	mov	r17, r22
	register uint8_t i;		//check to make sure we have a good pointer
	
	if(!data)
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	49 f0       	breq	.+18     	; 0x2a6 <LCDstring+0x20>
	{
		return;
	}
	// print data
	for(i = 0; i < nBytes; i++)
 294:	66 23       	and	r22, r22
 296:	39 f0       	breq	.+14     	; 0x2a6 <LCDstring+0x20>
 298:	ec 01       	movw	r28, r24
 29a:	00 e0       	ldi	r16, 0x00	; 0
	{
		LCDsendChar(data[i]);
 29c:	89 91       	ld	r24, Y+
 29e:	9d df       	rcall	.-198    	; 0x1da <LCDsendChar>
	if(!data)
	{
		return;
	}
	// print data
	for(i = 0; i < nBytes; i++)
 2a0:	0f 5f       	subi	r16, 0xFF	; 255
 2a2:	01 17       	cp	r16, r17
 2a4:	d9 f7       	brne	.-10     	; 0x29c <LCDstring+0x16>
	{
		LCDsendChar(data[i]);
	}
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;		//remap lines into proper order
	
	switch(y)
 2b0:	62 30       	cpi	r22, 0x02	; 2
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <LCDGotoXY+0x10>
 2b4:	63 30       	cpi	r22, 0x03	; 3
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <LCDGotoXY+0x14>
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <LCDGotoXY+0x16>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR + x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR + x; break;
 2bc:	80 5c       	subi	r24, 0xC0	; 192
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <LCDGotoXY+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR + x; break;
 2c0:	8c 5e       	subi	r24, 0xEC	; 236
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCDGotoXY+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR + x; break;
 2c4:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR + x;
	}
	
	LCDsendCommand(1 << LCD_DDRAM | DDRAMAddr);	//set data address
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	b2 df       	rcall	.-156    	; 0x22e <LCDsendCommand>
}
 2ca:	08 95       	ret

000002cc <CopyStringtoLCD>:

//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1); 
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	8c 01       	movw	r16, r24
 2d4:	86 2f       	mov	r24, r22
	uint8_t i;

	LCDGotoXY(x, y);
 2d6:	64 2f       	mov	r22, r20
 2d8:	eb df       	rcall	.-42     	; 0x2b0 <LCDGotoXY>
	
	for(i = 0; (uint8_t)pgm_read_byte(&FlashLoc[i]); i++)
 2da:	c8 01       	movw	r24, r16
 2dc:	f8 01       	movw	r30, r16
 2de:	24 91       	lpm	r18, Z
 2e0:	22 23       	and	r18, r18
 2e2:	61 f0       	breq	.+24     	; 0x2fc <CopyStringtoLCD+0x30>
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 2e6:	fc 01       	movw	r30, r24
 2e8:	84 91       	lpm	r24, Z
 2ea:	77 df       	rcall	.-274    	; 0x1da <LCDsendChar>
{
	uint8_t i;

	LCDGotoXY(x, y);
	
	for(i = 0; (uint8_t)pgm_read_byte(&FlashLoc[i]); i++)
 2ec:	cf 5f       	subi	r28, 0xFF	; 255
 2ee:	c8 01       	movw	r24, r16
 2f0:	8c 0f       	add	r24, r28
 2f2:	91 1d       	adc	r25, r1
 2f4:	fc 01       	movw	r30, r24
 2f6:	24 91       	lpm	r18, Z
 2f8:	22 23       	and	r18, r18
 2fa:	a9 f7       	brne	.-22     	; 0x2e6 <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <LCDdefinechar>:

LCDdefinechar(backslash, 0);
*/

void LCDdefinechar(const uint8_t *pc,uint8_t char_code)
{
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;

	a = (char_code << 3) | 0x40;
 312:	d6 2f       	mov	r29, r22
 314:	dd 0f       	add	r29, r29
 316:	dd 0f       	add	r29, r29
 318:	dd 0f       	add	r29, r29
 31a:	d0 64       	ori	r29, 0x40	; 64
	
	for(i = 0; i < 8; i++)
 31c:	00 e0       	ldi	r16, 0x00	; 0
 31e:	10 e0       	ldi	r17, 0x00	; 0
};

LCDdefinechar(backslash, 0);
*/

void LCDdefinechar(const uint8_t *pc,uint8_t char_code)
 320:	f7 01       	movw	r30, r14
 322:	e0 0f       	add	r30, r16
 324:	f1 1f       	adc	r31, r17

	a = (char_code << 3) | 0x40;
	
	for(i = 0; i < 8; i++)
	{
		pcc = pgm_read_byte(&pc[i]);
 326:	c4 91       	lpm	r28, Z
		LCDsendCommand(a++);
 328:	8d 2f       	mov	r24, r29
 32a:	80 0f       	add	r24, r16
 32c:	80 df       	rcall	.-256    	; 0x22e <LCDsendCommand>
		LCDsendChar(pcc);
 32e:	8c 2f       	mov	r24, r28
 330:	54 df       	rcall	.-344    	; 0x1da <LCDsendChar>
	uint8_t a, pcc;
	uint16_t i;

	a = (char_code << 3) | 0x40;
	
	for(i = 0; i < 8; i++)
 332:	0f 5f       	subi	r16, 0xFF	; 255
 334:	1f 4f       	sbci	r17, 0xFF	; 255
 336:	08 30       	cpi	r16, 0x08	; 8
 338:	11 05       	cpc	r17, r1
 33a:	91 f7       	brne	.-28     	; 0x320 <LCDdefinechar+0x1c>
	{
		pcc = pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	08 95       	ret

0000034a <LCDinit>:
		}
	}
#endif

void LCDinit(void)	//Initializes LCD 
{
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	8f e2       	ldi	r24, 0x2F	; 47
 352:	95 e7       	ldi	r25, 0x75	; 117
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCDinit+0xa>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCDinit+0x10>
 35a:	00 00       	nop
	#ifdef LCD_4BIT_M	//4 mixed bit part
		
		_delay_ms(15);
		
		//zero to data pins
		LCDMix_4Bit(0b00000000);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	28 df       	rcall	.-432    	; 0x1b0 <LCDMix_4Bit>
		
		//zero to control pins
		LDPRS &= ~(1 << LCD_RS);
 360:	c5 98       	cbi	0x18, 5	; 24
		LDPRW &= ~(1 << LCD_RW);
 362:	91 98       	cbi	0x12, 1	; 18
		LDPE &= ~(1 << LCD_E);
 364:	92 98       	cbi	0x12, 2	; 18
		
		//set data direction
		LDDD4 |= 1 << LCD_D4;
 366:	8c 9a       	sbi	0x11, 4	; 17
		LDDD5 |= 1 << LCD_D5;
 368:	a2 9a       	sbi	0x14, 2	; 20
		LDDD6 |= 1 << LCD_D6;
 36a:	8e 9a       	sbi	0x11, 6	; 17
		LDDD7 |= 1 << LCD_D7;
 36c:	b8 9a       	sbi	0x17, 0	; 23
		
		//control direction pins
		LDDRS |= 1 << LCD_RS;
 36e:	bd 9a       	sbi	0x17, 5	; 23
		LDDRW |= 1 << LCD_RW;
 370:	89 9a       	sbi	0x11, 1	; 17
		LDDE |= 1 << LCD_E;
 372:	8a 9a       	sbi	0x11, 2	; 17
		
	   //---------one------
		LCDMix_4Bit(0b00110000);
 374:	80 e3       	ldi	r24, 0x30	; 48
 376:	1c df       	rcall	.-456    	; 0x1b0 <LCDMix_4Bit>
		LDPE |= 1 << LCD_E;
 378:	92 9a       	sbi	0x12, 2	; 18
 37a:	8f ec       	ldi	r24, 0xCF	; 207
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCDinit+0x34>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCDinit+0x3a>
 384:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
 386:	92 98       	cbi	0x12, 2	; 18
 388:	8f ec       	ldi	r24, 0xCF	; 207
 38a:	97 e0       	ldi	r25, 0x07	; 7
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDinit+0x42>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCDinit+0x48>
 392:	00 00       	nop
		_delay_ms(1);
		
		//-----------two-----------
		LCDMix_4Bit(0b00110000);
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	0c df       	rcall	.-488    	; 0x1b0 <LCDMix_4Bit>
		LDPE |= 1 << LCD_E;
 398:	92 9a       	sbi	0x12, 2	; 18
 39a:	8f ec       	ldi	r24, 0xCF	; 207
 39c:	97 e0       	ldi	r25, 0x07	; 7
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCDinit+0x54>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCDinit+0x5a>
 3a4:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
 3a6:	92 98       	cbi	0x12, 2	; 18
 3a8:	8f ec       	ldi	r24, 0xCF	; 207
 3aa:	97 e0       	ldi	r25, 0x07	; 7
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCDinit+0x62>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCDinit+0x68>
 3b2:	00 00       	nop
		_delay_ms(1);
		
		//-------three-------------
		LCDMix_4Bit(0b00100000);
 3b4:	80 e2       	ldi	r24, 0x20	; 32
 3b6:	fc de       	rcall	.-520    	; 0x1b0 <LCDMix_4Bit>
		LDPE |= 1 << LCD_E;		
 3b8:	92 9a       	sbi	0x12, 2	; 18
 3ba:	8f ec       	ldi	r24, 0xCF	; 207
 3bc:	97 e0       	ldi	r25, 0x07	; 7
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCDinit+0x74>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCDinit+0x7a>
 3c4:	00 00       	nop
		_delay_ms(1);
		
		LDPE &= ~(1 << LCD_E);
 3c6:	92 98       	cbi	0x12, 2	; 18
 3c8:	8f ec       	ldi	r24, 0xCF	; 207
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCDinit+0x82>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCDinit+0x88>
 3d2:	00 00       	nop
		_delay_ms(1);
		
		//--------4 bit--dual line---------------
		LCDsendCommand(0b00101000);
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	2b df       	rcall	.-426    	; 0x22e <LCDsendCommand>
		
	   //-----increment address, invisible cursor shift------
		LCDsendCommand(0b00001100);
 3d8:	8c e0       	ldi	r24, 0x0C	; 12
 3da:	29 df       	rcall	.-430    	; 0x22e <LCDsendCommand>
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d0 e0       	ldi	r29, 0x00	; 0
	   //-----increment address, invisible cursor shift------
		LCDsendCommand(0b00001100);
	#endif
	
	//Init 8 custom chars
	uint8_t ch = 0, chn = 0;
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <LCDinit+0x9c>
	
	while(ch < 64)
	{
		LCDdefinechar((LcdCustomChar + ch), chn++);
 3e4:	61 2f       	mov	r22, r17
 3e6:	16 2f       	mov	r17, r22
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
 3ea:	ce 01       	movw	r24, r28
 3ec:	8c 5a       	subi	r24, 0xAC	; 172
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	89 df       	rcall	.-238    	; 0x304 <LCDdefinechar>
 3f2:	28 96       	adiw	r28, 0x08	; 8
	#endif
	
	//Init 8 custom chars
	uint8_t ch = 0, chn = 0;
	
	while(ch < 64)
 3f4:	18 30       	cpi	r17, 0x08	; 8
 3f6:	b1 f7       	brne	.-20     	; 0x3e4 <LCDinit+0x9a>
	{
		LCDdefinechar((LcdCustomChar + ch), chn++);
		ch = ch + 8;
	}
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	08 95       	ret

00000400 <LCDshiftLeft>:
		LCDsendChar(pcc);
	}
}

void LCDshiftLeft(uint8_t n)	//Scroll n of characters Right
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	d8 2f       	mov	r29, r24
	for(uint8_t i = 0; i < n; i++)
 406:	88 23       	and	r24, r24
 408:	31 f0       	breq	.+12     	; 0x416 <LCDshiftLeft+0x16>
 40a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendCommand(0x1E);
 40c:	8e e1       	ldi	r24, 0x1E	; 30
 40e:	0f df       	rcall	.-482    	; 0x22e <LCDsendCommand>
	}
}

void LCDshiftLeft(uint8_t n)	//Scroll n of characters Right
{
	for(uint8_t i = 0; i < n; i++)
 410:	cf 5f       	subi	r28, 0xFF	; 255
 412:	cd 17       	cp	r28, r29
 414:	d9 f7       	brne	.-10     	; 0x40c <LCDshiftLeft+0xc>
	{
		LCDsendCommand(0x1E);
	}
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <LCDshiftRight>:

void LCDshiftRight(uint8_t n)	//Scroll n of characters Left
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	d8 2f       	mov	r29, r24
	for(uint8_t i = 0; i < n; i++)
 422:	88 23       	and	r24, r24
 424:	31 f0       	breq	.+12     	; 0x432 <LCDshiftRight+0x16>
 426:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendCommand(0x18);
 428:	88 e1       	ldi	r24, 0x18	; 24
 42a:	01 df       	rcall	.-510    	; 0x22e <LCDsendCommand>
	}
}

void LCDshiftRight(uint8_t n)	//Scroll n of characters Left
{
	for(uint8_t i = 0; i < n; i++)
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	cd 17       	cp	r28, r29
 430:	d9 f7       	brne	.-10     	; 0x428 <LCDshiftRight+0xc>
	{
		LCDsendCommand(0x18);
	}
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <LCDcursorOn>:

void LCDcursorOn(void)	//displays LCD cursor
{
	LCDsendCommand(0x0E);
 438:	8e e0       	ldi	r24, 0x0E	; 14
 43a:	f9 de       	rcall	.-526    	; 0x22e <LCDsendCommand>
}
 43c:	08 95       	ret

0000043e <LCDcursorOnBlink>:

void LCDcursorOnBlink(void)		//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 43e:	8f e0       	ldi	r24, 0x0F	; 15
 440:	f6 de       	rcall	.-532    	; 0x22e <LCDsendCommand>
}
 442:	08 95       	ret

00000444 <LCDcursorOFF>:

void LCDcursorOFF(void)		//turns OFF cursor
{
	LCDsendCommand(0x0C);
 444:	8c e0       	ldi	r24, 0x0C	; 12
 446:	f3 de       	rcall	.-538    	; 0x22e <LCDsendCommand>
}
 448:	08 95       	ret

0000044a <LCDblank>:

void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	f0 de       	rcall	.-544    	; 0x22e <LCDsendCommand>
}
 44e:	08 95       	ret

00000450 <LCDvisible>:

void LCDvisible(void)	//Shows LCD
{
	LCDsendCommand(0x0C);
 450:	8c e0       	ldi	r24, 0x0C	; 12
 452:	ed de       	rcall	.-550    	; 0x22e <LCDsendCommand>
}
 454:	08 95       	ret

00000456 <LCDcursorLeft>:

void LCDcursorLeft(uint8_t n)	//Moves cursor by n positions left
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	d8 2f       	mov	r29, r24
	for(uint8_t i = 0; i < n; i++)
 45c:	88 23       	and	r24, r24
 45e:	31 f0       	breq	.+12     	; 0x46c <__stack+0xd>
 460:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendCommand(0x10);
 462:	80 e1       	ldi	r24, 0x10	; 16
 464:	e4 de       	rcall	.-568    	; 0x22e <LCDsendCommand>
	LCDsendCommand(0x0C);
}

void LCDcursorLeft(uint8_t n)	//Moves cursor by n positions left
{
	for(uint8_t i = 0; i < n; i++)
 466:	cf 5f       	subi	r28, 0xFF	; 255
 468:	cd 17       	cp	r28, r29
 46a:	d9 f7       	brne	.-10     	; 0x462 <__stack+0x3>
	{
		LCDsendCommand(0x10);
	}
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <LCDcursorRight>:

void LCDcursorRight(uint8_t n)	//Moves cursor by n positions left
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	d8 2f       	mov	r29, r24
	for(uint8_t i = 0; i < n; i++)
 478:	88 23       	and	r24, r24
 47a:	31 f0       	breq	.+12     	; 0x488 <LCDcursorRight+0x16>
 47c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCDsendCommand(0x14);
 47e:	84 e1       	ldi	r24, 0x14	; 20
 480:	d6 de       	rcall	.-596    	; 0x22e <LCDsendCommand>
	}
}

void LCDcursorRight(uint8_t n)	//Moves cursor by n positions left
{
	for(uint8_t i = 0; i < n; i++)
 482:	cf 5f       	subi	r28, 0xFF	; 255
 484:	cd 17       	cp	r28, r29
 486:	d9 f7       	brne	.-10     	; 0x47e <LCDcursorRight+0xc>
	{
		LCDsendCommand(0x14);
	}
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <LCDprogressBar>:

//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
	// with a total length of "length" characters
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
 4a0:	e8 2f       	mov	r30, r24
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	84 2f       	mov	r24, r20
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	9c 01       	movw	r18, r24
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	28 0f       	add	r18, r24
 4b0:	39 1f       	adc	r19, r25
 4b2:	22 0f       	add	r18, r18
 4b4:	33 1f       	adc	r19, r19
 4b6:	e2 9f       	mul	r30, r18
 4b8:	c0 01       	movw	r24, r0
 4ba:	e3 9f       	mul	r30, r19
 4bc:	90 0d       	add	r25, r0
 4be:	f2 9f       	mul	r31, r18
 4c0:	90 0d       	add	r25, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	4a d0       	rcall	.+148    	; 0x55c <__divmodhi4>
 4c8:	8b 01       	movw	r16, r22
	
	// print exactly "length" characters
	for(i = 0; i < length; i++)
 4ca:	44 23       	and	r20, r20
 4cc:	49 f1       	breq	.+82     	; 0x520 <LCDprogressBar+0x92>
				c = 0;
			}
			else
			{
				//this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 4ce:	cb 01       	movw	r24, r22
 4d0:	66 e0       	ldi	r22, 0x06	; 6
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	2f d0       	rcall	.+94     	; 0x534 <__udivmodhi4>
		LCDsendCommand(0x14);
	}
}

//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
 4d6:	41 50       	subi	r20, 0x01	; 1
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	4f 5f       	subi	r20, 0xFF	; 255
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	7a 01       	movw	r14, r20
 4e0:	ee 0c       	add	r14, r14
 4e2:	ff 1c       	adc	r15, r15
 4e4:	e4 0e       	add	r14, r20
 4e6:	f5 1e       	adc	r15, r21
 4e8:	ee 0c       	add	r14, r14
 4ea:	ff 1c       	adc	r15, r15
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		else
		{
			//this is a full block
			c = 5;
 4f0:	0f 2e       	mov	r0, r31
 4f2:	f5 e0       	ldi	r31, 0x05	; 5
 4f4:	df 2e       	mov	r13, r31
 4f6:	f0 2d       	mov	r31, r0
				c = 0;
			}
			else
			{
				//this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 4f8:	c8 2e       	mov	r12, r24
			//this is a partial or empty block
			if(((i * (uint16_t) PROGRESSPIXELS_PER_CHAR)) > pixelprogress)
			{
				//this is an empty block
				//use space character?
				c = 0;
 4fa:	bb 24       	eor	r11, r11
	// print exactly "length" characters
	for(i = 0; i < length; i++)
	{
		//check if this is a full block, or partial or empty
		//(u16) cast is needed to avoid sign comparison warning
		if(((i * (uint16_t) PROGRESSPIXELS_PER_CHAR) + 5) > pixelprogress)
 4fc:	ce 01       	movw	r24, r28
 4fe:	05 96       	adiw	r24, 0x05	; 5
 500:	08 17       	cp	r16, r24
 502:	19 07       	cpc	r17, r25
 504:	28 f4       	brcc	.+10     	; 0x510 <LCDprogressBar+0x82>
		{
			//this is a partial or empty block
			if(((i * (uint16_t) PROGRESSPIXELS_PER_CHAR)) > pixelprogress)
 506:	0c 17       	cp	r16, r28
 508:	1d 07       	cpc	r17, r29
 50a:	20 f4       	brcc	.+8      	; 0x514 <LCDprogressBar+0x86>
			{
				//this is an empty block
				//use space character?
				c = 0;
 50c:	8b 2d       	mov	r24, r11
 50e:	03 c0       	rjmp	.+6      	; 0x516 <LCDprogressBar+0x88>
			}
		}
		else
		{
			//this is a full block
			c = 5;
 510:	8d 2d       	mov	r24, r13
 512:	01 c0       	rjmp	.+2      	; 0x516 <LCDprogressBar+0x88>
				c = 0;
			}
			else
			{
				//this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 514:	8c 2d       	mov	r24, r12
			//this is a full block
			c = 5;
		}
		
		//write character to display
		LCDsendChar(c);
 516:	61 de       	rcall	.-830    	; 0x1da <LCDsendChar>
 518:	26 96       	adiw	r28, 0x06	; 6
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
	
	// print exactly "length" characters
	for(i = 0; i < length; i++)
 51a:	ce 15       	cp	r28, r14
 51c:	df 05       	cpc	r29, r15
 51e:	71 f7       	brne	.-36     	; 0x4fc <LCDprogressBar+0x6e>
		}
		
		//write character to display
		LCDsendChar(c);
	}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	bf 90       	pop	r11
 532:	08 95       	ret

00000534 <__udivmodhi4>:
 534:	aa 1b       	sub	r26, r26
 536:	bb 1b       	sub	r27, r27
 538:	51 e1       	ldi	r21, 0x11	; 17
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__udivmodhi4_ep>

0000053c <__udivmodhi4_loop>:
 53c:	aa 1f       	adc	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	a6 17       	cp	r26, r22
 542:	b7 07       	cpc	r27, r23
 544:	10 f0       	brcs	.+4      	; 0x54a <__udivmodhi4_ep>
 546:	a6 1b       	sub	r26, r22
 548:	b7 0b       	sbc	r27, r23

0000054a <__udivmodhi4_ep>:
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	5a 95       	dec	r21
 550:	a9 f7       	brne	.-22     	; 0x53c <__udivmodhi4_loop>
 552:	80 95       	com	r24
 554:	90 95       	com	r25
 556:	bc 01       	movw	r22, r24
 558:	cd 01       	movw	r24, r26
 55a:	08 95       	ret

0000055c <__divmodhi4>:
 55c:	97 fb       	bst	r25, 7
 55e:	09 2e       	mov	r0, r25
 560:	07 26       	eor	r0, r23
 562:	0a d0       	rcall	.+20     	; 0x578 <__divmodhi4_neg1>
 564:	77 fd       	sbrc	r23, 7
 566:	04 d0       	rcall	.+8      	; 0x570 <__divmodhi4_neg2>
 568:	e5 df       	rcall	.-54     	; 0x534 <__udivmodhi4>
 56a:	06 d0       	rcall	.+12     	; 0x578 <__divmodhi4_neg1>
 56c:	00 20       	and	r0, r0
 56e:	1a f4       	brpl	.+6      	; 0x576 <__divmodhi4_exit>

00000570 <__divmodhi4_neg2>:
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255

00000576 <__divmodhi4_exit>:
 576:	08 95       	ret

00000578 <__divmodhi4_neg1>:
 578:	f6 f7       	brtc	.-4      	; 0x576 <__divmodhi4_exit>
 57a:	90 95       	com	r25
 57c:	81 95       	neg	r24
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
