
Demo Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000870  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000423  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e0  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000405  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	2d 2d       	mov	r18, r13
  56:	2d 2d       	mov	r18, r13
  58:	2d 2d       	mov	r18, r13
  5a:	2d 2d       	mov	r18, r13
  5c:	2d 2d       	mov	r18, r13
  5e:	2d 2d       	mov	r18, r13
  60:	2d 2d       	mov	r18, r13
  62:	2d 2d       	mov	r18, r13
  64:	2d 2d       	mov	r18, r13
  66:	2d 2d       	mov	r18, r13
	...

00000069 <__c.1927>:
  69:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  79:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  89:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  99:	2a 2a 2a 2a 00                                      ****.

0000009e <__c.1925>:
  9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 41 44 43                  ADC
  ae:	20 54 65 73 74 69 6e 67 00                           Testing.

000000b7 <__c.1923>:
  b7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  c7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  d7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
  e7:	2a 2a 2a 2a 00                                      ****.

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf e5       	ldi	r28, 0x5F	; 95
  f2:	d4 e0       	ldi	r29, 0x04	; 4
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	a0 e6       	ldi	r26, 0x60	; 96
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e8 e2       	ldi	r30, 0x28	; 40
 100:	f3 e0       	ldi	r31, 0x03	; 3
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x10>
 104:	05 90       	lpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 36       	cpi	r26, 0x60	; 96
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0xc>

0000010e <__do_clear_bss>:
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	a0 e6       	ldi	r26, 0x60	; 96
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 36       	cpi	r26, 0x6C	; 108
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 b8 00 	call	0x170	; 0x170 <main>
 122:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <Init_ADC>:
#include <avr/interrupt.h>
#include "ADC_routines.h"

void Init_ADC(void)				//Initialize the ADC, Conversion time 52uS
{
	ADCSRA = 0x00;				//Clear ADCSRA Register
 12a:	16 b8       	out	0x06, r1	; 6
	ADMUX |= 1 << REFS0;		//Reference is AVCC with external capacitor at AREF pin.
 12c:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX &= ~(1 << ADLAR);		//Right adjust the result	
 12e:	3d 98       	cbi	0x07, 5	; 7
	
	ADCSRA &= ~(1 << ADPS0);	//Division factor: 4, single conversion mode 
 130:	30 98       	cbi	0x06, 0	; 6
	ADCSRA |= 1 << ADPS1;
 132:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA &= ~(1 << ADPS2);	
 134:	32 98       	cbi	0x06, 2	; 6
	ADCSRA |= (1 << ADEN);		//Enable ADC
 136:	37 9a       	sbi	0x06, 7	; 6
 138:	08 95       	ret

0000013a <readADCValue>:

int readADCValue(unsigned char channel)		//Read ADC value from channel
{
	unsigned int ADCH_temp = 0, ADC_temp = 0, ADCValue = 0;
		
	ADMUX = 0b01000000 | channel;			//Select channel
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	87 b9       	out	0x07, r24	; 7
 13e:	48 e0       	ldi	r20, 0x08	; 8
	ADCSRA |= (1 << ADEN);		//Enable ADC
}

int readADCValue(unsigned char channel)		//Read ADC value from channel
{
	unsigned int ADCH_temp = 0, ADC_temp = 0, ADCValue = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
		
	ADMUX = 0b01000000 | channel;			//Select channel
	
	for(unsigned char i = 0; i < 8; i++)	//Do the ADC conversion 8 times for better accuracy
	{
		ADCSRA |= (1 << ADSC);				//Start conversion
 144:	36 9a       	sbi	0x06, 6	; 6
		
		while(!(ADCSRA & (1 << ADIF)));		//wait for conversion done
 146:	34 9b       	sbis	0x06, 4	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <readADCValue+0xc>
		ADCSRA |= (1 << ADIF);				//ADIF flag active
 14a:	34 9a       	sbi	0x06, 4	; 6
		
		ADC_temp = ADCL;					//read out ADCL register
 14c:	54 b1       	in	r21, 0x04	; 4
		ADCH_temp = ADCH;					//read out ADCH register
 14e:	25 b1       	in	r18, 0x05	; 5
 150:	30 e0       	ldi	r19, 0x00	; 0
		ADC_temp += (ADCH_temp << 8);		//Merge 10 bit result
 152:	32 2f       	mov	r19, r18
 154:	22 27       	eor	r18, r18
 156:	25 0f       	add	r18, r21
 158:	31 1d       	adc	r19, r1
		
		ADCValue += ADC_temp;				//Accumulate result (8 samples) for later averaging
 15a:	82 0f       	add	r24, r18
 15c:	93 1f       	adc	r25, r19
 15e:	41 50       	subi	r20, 0x01	; 1
{
	unsigned int ADCH_temp = 0, ADC_temp = 0, ADCValue = 0;
		
	ADMUX = 0b01000000 | channel;			//Select channel
	
	for(unsigned char i = 0; i < 8; i++)	//Do the ADC conversion 8 times for better accuracy
 160:	89 f7       	brne	.-30     	; 0x144 <readADCValue+0xa>
	}
	
	ADCValue = ADCValue / 8; //Average the 8 samples
	
	return ADCValue;
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	08 95       	ret

00000170 <main>:
char ADCValuesStr[10];


int main(void)
{
	USART_Init();
 170:	0e 94 2e 01 	call	0x25c	; 0x25c <USART_Init>
	
	Init_ADC();
 174:	0e 94 95 00 	call	0x12a	; 0x12a <Init_ADC>
	
	transmitString_P(PSTR("****************************************************"));
 178:	87 eb       	ldi	r24, 0xB7	; 183
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 3a 01 	call	0x274	; 0x274 <transmitString_P>
	TX_NEWLINE;
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
	transmitString_P(PSTR("             ADC Testing"));
 18c:	8e e9       	ldi	r24, 0x9E	; 158
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 3a 01 	call	0x274	; 0x274 <transmitString_P>
	TX_NEWLINE;
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
	transmitString_P(PSTR("****************************************************"));
 1a0:	89 e6       	ldi	r24, 0x69	; 105
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 3a 01 	call	0x274	; 0x274 <transmitString_P>
	TX_NEWLINE;
 1a8:	8d e0       	ldi	r24, 0x0D	; 13
 1aa:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
	TX_NEWLINE;
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
	
	
	while(1)
	{
		ADCValues = readADCValue(0);		//Read voltage from selected channel and store in ADCValues array		
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 9d 00 	call	0x13a	; 0x13a <readADCValue>
		ADCValues = (ADCValues * 5);		
 1c6:	9c 01       	movw	r18, r24
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	82 0f       	add	r24, r18
 1d2:	93 1f       	adc	r25, r19
 1d4:	90 93 61 00 	sts	0x0061, r25
 1d8:	80 93 60 00 	sts	0x0060, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	62 e6       	ldi	r22, 0x62	; 98
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__itoa_ncheck>
		itoa(ADCValues, ADCValuesStr, 10);	//Convert ADC Value to string to print via USART			
		transmitString(ADCValuesStr);					//Print via USART
 1e6:	82 e6       	ldi	r24, 0x62	; 98
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 4e 01 	call	0x29c	; 0x29c <transmitString>
		TX_NEWLINE;
 1ee:	8d e0       	ldi	r24, 0x0D	; 13
 1f0:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
		
		ADCValues = readADCValue(1);		//Read voltage from selected channel and store in ADCValues array
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 9d 00 	call	0x13a	; 0x13a <readADCValue>
		ADCValues = (ADCValues * 5);
 200:	9c 01       	movw	r18, r24
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	82 0f       	add	r24, r18
 20c:	93 1f       	adc	r25, r19
 20e:	90 93 61 00 	sts	0x0061, r25
 212:	80 93 60 00 	sts	0x0060, r24
 216:	4a e0       	ldi	r20, 0x0A	; 10
 218:	62 e6       	ldi	r22, 0x62	; 98
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__itoa_ncheck>
		itoa(ADCValues, ADCValuesStr, 10);	//Convert ADC Value to string to print via USART
		transmitString(ADCValuesStr);					//Print via USART
 220:	82 e6       	ldi	r24, 0x62	; 98
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 4e 01 	call	0x29c	; 0x29c <transmitString>
		TX_NEWLINE;
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
		
		transmitString_P(PSTR("--------------------"));
 234:	84 e5       	ldi	r24, 0x54	; 84
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 3a 01 	call	0x274	; 0x274 <transmitString_P>
		TX_NEWLINE;
 23c:	8d e0       	ldi	r24, 0x0D	; 13
 23e:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	8d e3       	ldi	r24, 0x3D	; 61
 24c:	99 e4       	ldi	r25, 0x49	; 73
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0xde>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xe8>
 258:	00 00       	nop
 25a:	b2 cf       	rjmp	.-156    	; 0x1c0 <main+0x50>

0000025c <USART_Init>:
//************************************************
//        Function to initialize USART
//************************************************
void USART_Init()
{
	UCSRB = (1 << RXEN ) | (1 << TXEN );					//Turn on the transmission and reception circuitry
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ1 ) | (1 << UCSZ0 );	// Use 8- bit character sizes
 260:	86 e8       	ldi	r24, 0x86	; 134
 262:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = (BAUD_PRESCALE >> 8);							//Load upper 8- bits of the baud rate value into the high byte of the UBRR register
 264:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;									//Load lower 8 - bits of the baud rate value into the low byte of the UBRR register	
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	89 b9       	out	0x09, r24	; 9
 26a:	08 95       	ret

0000026c <transmitByte>:
//***************************************************
//       Function to transmit a single byte
//***************************************************
void transmitByte(unsigned char data)
{
	while((UCSRA & (1 << UDRE)) == 0) {}; //Do nothing until UDR is ready for more data to be written to it
 26c:	5d 9b       	sbis	0x0b, 5	; 11
 26e:	fe cf       	rjmp	.-4      	; 0x26c <transmitByte>
	
	UDR = data;
 270:	8c b9       	out	0x0c, r24	; 12
 272:	08 95       	ret

00000274 <transmitString_P>:

//***************************************************
//     Function to transmit a string in Flash
//***************************************************
void transmitString_P(const char* string)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	ec 01       	movw	r28, r24
	while(pgm_read_byte( & (*string)))
 27a:	fe 01       	movw	r30, r28
 27c:	24 91       	lpm	r18, Z
 27e:	22 23       	and	r18, r18
 280:	51 f0       	breq	.+20     	; 0x296 <transmitString_P+0x22>
	{
		transmitByte(pgm_read_byte(&(*string++)));
 282:	21 96       	adiw	r28, 0x01	; 1
 284:	fc 01       	movw	r30, r24
 286:	84 91       	lpm	r24, Z
 288:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
//***************************************************
//     Function to transmit a string in Flash
//***************************************************
void transmitString_P(const char* string)
{
	while(pgm_read_byte( & (*string)))
 28c:	ce 01       	movw	r24, r28
 28e:	fe 01       	movw	r30, r28
 290:	24 91       	lpm	r18, Z
 292:	21 11       	cpse	r18, r1
 294:	f6 cf       	rjmp	.-20     	; 0x282 <transmitString_P+0xe>
	{
		transmitByte(pgm_read_byte(&(*string++)));
	}
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <transmitString>:

//***************************************************
//      Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
	while(*string)
 2a2:	88 81       	ld	r24, Y
 2a4:	88 23       	and	r24, r24
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <transmitString+0x18>
 2a8:	21 96       	adiw	r28, 0x01	; 1
	{
		transmitByte(*string++);
 2aa:	0e 94 36 01 	call	0x26c	; 0x26c <transmitByte>
//***************************************************
//      Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
	while(*string)
 2ae:	89 91       	ld	r24, Y+
 2b0:	81 11       	cpse	r24, r1
 2b2:	fb cf       	rjmp	.-10     	; 0x2aa <transmitString+0xe>
	{
		transmitByte(*string++);
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <__itoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27
 2bc:	4a 30       	cpi	r20, 0x0A	; 10
 2be:	31 f4       	brne	.+12     	; 0x2cc <__itoa_ncheck+0x12>
 2c0:	99 23       	and	r25, r25
 2c2:	22 f4       	brpl	.+8      	; 0x2cc <__itoa_ncheck+0x12>
 2c4:	bd e2       	ldi	r27, 0x2D	; 45
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__utoa_common>

000002d0 <__utoa_ncheck>:
 2d0:	bb 27       	eor	r27, r27

000002d2 <__utoa_common>:
 2d2:	fb 01       	movw	r30, r22
 2d4:	55 27       	eor	r21, r21
 2d6:	aa 27       	eor	r26, r26
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	a4 17       	cp	r26, r20
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <__utoa_common+0x14>
 2e2:	a4 1b       	sub	r26, r20
 2e4:	83 95       	inc	r24
 2e6:	50 51       	subi	r21, 0x10	; 16
 2e8:	b9 f7       	brne	.-18     	; 0x2d8 <__utoa_common+0x6>
 2ea:	a0 5d       	subi	r26, 0xD0	; 208
 2ec:	aa 33       	cpi	r26, 0x3A	; 58
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <__utoa_common+0x20>
 2f0:	a9 5d       	subi	r26, 0xD9	; 217
 2f2:	a1 93       	st	Z+, r26
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	79 f7       	brne	.-34     	; 0x2d6 <__utoa_common+0x4>
 2f8:	b1 11       	cpse	r27, r1
 2fa:	b1 93       	st	Z+, r27
 2fc:	11 92       	st	Z+, r1
 2fe:	cb 01       	movw	r24, r22
 300:	0c 94 82 01 	jmp	0x304	; 0x304 <strrev>

00000304 <strrev>:
 304:	dc 01       	movw	r26, r24
 306:	fc 01       	movw	r30, r24
 308:	67 2f       	mov	r22, r23
 30a:	71 91       	ld	r23, Z+
 30c:	77 23       	and	r23, r23
 30e:	e1 f7       	brne	.-8      	; 0x308 <strrev+0x4>
 310:	32 97       	sbiw	r30, 0x02	; 2
 312:	04 c0       	rjmp	.+8      	; 0x31c <strrev+0x18>
 314:	7c 91       	ld	r23, X
 316:	6d 93       	st	X+, r22
 318:	70 83       	st	Z, r23
 31a:	62 91       	ld	r22, -Z
 31c:	ae 17       	cp	r26, r30
 31e:	bf 07       	cpc	r27, r31
 320:	c8 f3       	brcs	.-14     	; 0x314 <strrev+0x10>
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
