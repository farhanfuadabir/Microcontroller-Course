
10.12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013b  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000eb  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000155  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c2  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000007ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
	DDRA   = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC  |= 1 << PC3;			//PC3 as an output 
  70:	a3 9a       	sbi	0x14, 3	; 20
	DDRD = DDRD & (~(1 <<PD2));
  72:	8a 98       	cbi	0x11, 2	; 17
	
	MCUCR |= 1 << ISC01;
  74:	85 b7       	in	r24, 0x35	; 53
  76:	82 60       	ori	r24, 0x02	; 2
  78:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8e 7f       	andi	r24, 0xFE	; 254
  7e:	85 bf       	out	0x35, r24	; 53
		
	GICR |= 1 << INT0;			//Enable external int0
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
	sei();						//Enable interrupts
  86:	78 94       	sei
	
    while(1)
	{
		for(int i = 0; i < 8; i++)
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTA = 1 << i; 
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
	GICR |= 1 << INT0;			//Enable external int0
	sei();						//Enable interrupts
	
    while(1)
	{
		for(int i = 0; i < 8; i++)
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0
		{
			PORTA = 1 << i; 
  94:	9a 01       	movw	r18, r20
  96:	08 2e       	mov	r0, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <main+0x2e>
  a2:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	34 e3       	ldi	r19, 0x34	; 52
  a8:	ec e0       	ldi	r30, 0x0C	; 12
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	e0 40       	sbci	r30, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
	GICR |= 1 << INT0;			//Enable external int0
	sei();						//Enable interrupts
	
    while(1)
	{
		for(int i = 0; i < 8; i++)
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	91 05       	cpc	r25, r1
  bc:	5c f3       	brlt	.-42     	; 0x94 <main+0x28>
  be:	87 2f       	mov	r24, r23
  c0:	96 2f       	mov	r25, r22
  c2:	e8 cf       	rjmp	.-48     	; 0x94 <main+0x28>

000000c4 <__vector_1>:
		}
	}					
}

ISR(INT0_vect)					//ISR for external interrupt 0 
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	PORTC ^= (1 << PC3);
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
