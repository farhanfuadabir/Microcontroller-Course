
Digital_Clock_V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006e  0080006e  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034a  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d2  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019f  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000239  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026b  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	95 c0       	rjmp	.+298    	; 0x138 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ed       	ldi	r30, 0xD2	; 210
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 37       	cpi	r26, 0x7F	; 127
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	92 d0       	rcall	.+292    	; 0x17e <main>
  5a:	b9 c0       	rjmp	.+370    	; 0x1ce <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Timer1_Init>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void Timer1_Init()
{
	TCCR1B|=(1<<CS10)|(1<<CS11)|(1<<WGM12);
  5e:	8e b5       	in	r24, 0x2e	; 46
  60:	8b 60       	ori	r24, 0x0B	; 11
  62:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0xF9; // 1 ms
  64:	89 ef       	ldi	r24, 0xF9	; 249
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	9b bd       	out	0x2b, r25	; 43
  6a:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A);
  6c:	89 b7       	in	r24, 0x39	; 57
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	89 bf       	out	0x39, r24	; 57
  72:	08 95       	ret

00000074 <SPI_Init>:
}
void SPI_Init()
{
	DDRB |= (1<<5)|(1<<3);
  74:	87 b3       	in	r24, 0x17	; 23
  76:	88 62       	ori	r24, 0x28	; 40
  78:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  7a:	8d b1       	in	r24, 0x0d	; 13
  7c:	81 65       	ori	r24, 0x51	; 81
  7e:	8d b9       	out	0x0d, r24	; 13
  80:	08 95       	ret

00000082 <SPI_send>:
}

void SPI_send(uint8_t data)
{
	SPDR = data;                       //Load data into the buffer
  82:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF) ));
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <SPI_send+0x2>
}
  88:	08 95       	ret

0000008a <Set_Display>:

void Set_Display(uint8_t hour_t, uint8_t minute_t, uint8_t second_t)
{
	display_buffer[0] = hour_t/10;
  8a:	9d ec       	ldi	r25, 0xCD	; 205
  8c:	89 9f       	mul	r24, r25
  8e:	21 2d       	mov	r18, r1
  90:	11 24       	eor	r1, r1
  92:	26 95       	lsr	r18
  94:	26 95       	lsr	r18
  96:	26 95       	lsr	r18
  98:	ee e6       	ldi	r30, 0x6E	; 110
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	20 83       	st	Z, r18
	display_buffer[1] = hour_t%10;
  9e:	22 0f       	add	r18, r18
  a0:	32 2f       	mov	r19, r18
  a2:	33 0f       	add	r19, r19
  a4:	33 0f       	add	r19, r19
  a6:	23 0f       	add	r18, r19
  a8:	82 1b       	sub	r24, r18
  aa:	81 83       	std	Z+1, r24	; 0x01
	
	display_buffer[2] = minute_t/10;
  ac:	69 9f       	mul	r22, r25
  ae:	81 2d       	mov	r24, r1
  b0:	11 24       	eor	r1, r1
  b2:	86 95       	lsr	r24
  b4:	86 95       	lsr	r24
  b6:	86 95       	lsr	r24
  b8:	82 83       	std	Z+2, r24	; 0x02
	display_buffer[3] = minute_t%10;
  ba:	88 0f       	add	r24, r24
  bc:	28 2f       	mov	r18, r24
  be:	22 0f       	add	r18, r18
  c0:	22 0f       	add	r18, r18
  c2:	82 0f       	add	r24, r18
  c4:	68 1b       	sub	r22, r24
  c6:	63 83       	std	Z+3, r22	; 0x03
	
	display_buffer[4] = second_t/10;
  c8:	49 9f       	mul	r20, r25
  ca:	91 2d       	mov	r25, r1
  cc:	11 24       	eor	r1, r1
  ce:	96 95       	lsr	r25
  d0:	96 95       	lsr	r25
  d2:	96 95       	lsr	r25
  d4:	94 83       	std	Z+4, r25	; 0x04
	display_buffer[5] = second_t%10;
  d6:	99 0f       	add	r25, r25
  d8:	89 2f       	mov	r24, r25
  da:	88 0f       	add	r24, r24
  dc:	88 0f       	add	r24, r24
  de:	98 0f       	add	r25, r24
  e0:	49 1b       	sub	r20, r25
  e2:	45 83       	std	Z+5, r20	; 0x05
	
	display_buffer[6] = 0;
  e4:	16 82       	std	Z+6, r1	; 0x06
	display_buffer[7] = 0;
  e6:	17 82       	std	Z+7, r1	; 0x07
  e8:	08 95       	ret

000000ea <Refresh_Display>:
}

void Refresh_Display()
{	
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	display.select++;
  ee:	e6 e7       	ldi	r30, 0x76	; 118
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 83       	st	Z, r24
	if(display.select >= 8) display.select = 0;
  f8:	80 81       	ld	r24, Z
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	10 f0       	brcs	.+4      	; 0x102 <Refresh_Display+0x18>
  fe:	10 92 76 00 	sts	0x0076, r1

	//DISP_SELECT_PORT = ~(1<<display.select);
	
	STB_LOW();
 102:	c1 98       	cbi	0x18, 1	; 24
	SPI_send(~(1<<display.select));
 104:	c6 e7       	ldi	r28, 0x76	; 118
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	28 81       	ld	r18, Y
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Refresh_Display+0x2a>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <Refresh_Display+0x26>
 118:	80 95       	com	r24
 11a:	b3 df       	rcall	.-154    	; 0x82 <SPI_send>
	SPI_send(font[display_buffer[display.select]]);
 11c:	e8 81       	ld	r30, Y
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e2 59       	subi	r30, 0x92	; 146
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	e0 81       	ld	r30, Z
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e0 5a       	subi	r30, 0xA0	; 160
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	a9 df       	rcall	.-174    	; 0x82 <SPI_send>
	STB_HIGH();
 130:	c1 9a       	sbi	0x18, 1	; 24
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	Refresh_Display();
 15a:	c7 df       	rcall	.-114    	; 0xea <Refresh_Display>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main(void)
{
	DDRB = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xF0;
 182:	90 ef       	ldi	r25, 0xF0	; 240
 184:	94 bb       	out	0x14, r25	; 20
	DDRD = 0xFF;
 186:	81 bb       	out	0x11, r24	; 17
	
	Timer1_Init();
 188:	6a df       	rcall	.-300    	; 0x5e <Timer1_Init>
	SPI_Init();
 18a:	74 df       	rcall	.-280    	; 0x74 <SPI_Init>
	sei();
 18c:	78 94       	sei
	
	Set_Display(12,34,55);
 18e:	47 e3       	ldi	r20, 0x37	; 55
 190:	62 e2       	ldi	r22, 0x22	; 34
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	7a df       	rcall	.-268    	; 0x8a <Set_Display>
	
	uint8_t sec=0, min=0, hour=0;
	
    while (1) 
    {	
		sec++;
 196:	c1 e0       	ldi	r28, 0x01	; 1
	SPI_Init();
	sei();
	
	Set_Display(12,34,55);
	
	uint8_t sec=0, min=0, hour=0;
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
		sec++;
		
		if(sec > 59)
		{
			min++;
			sec = 0;
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <main+0x2e>
    {	
		sec++;
		
		if(sec > 59)
		{
			min++;
 1a0:	df 5f       	subi	r29, 0xFF	; 255
			sec = 0;
 1a2:	c0 2f       	mov	r28, r16
		}
		
		if(min > 59)
 1a4:	dc 33       	cpi	r29, 0x3C	; 60
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <main+0x2e>
		{
			hour++;
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
			min = 0;
 1aa:	d0 2f       	mov	r29, r16
		}
		
		Set_Display(hour,min,sec);
 1ac:	4c 2f       	mov	r20, r28
 1ae:	6d 2f       	mov	r22, r29
 1b0:	81 2f       	mov	r24, r17
 1b2:	6b df       	rcall	.-298    	; 0x8a <Set_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	80 e7       	ldi	r24, 0x70	; 112
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x3c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x46>
 1c4:	00 00       	nop
	
	uint8_t sec=0, min=0, hour=0;
	
    while (1) 
    {	
		sec++;
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(sec > 59)
 1c8:	cc 33       	cpi	r28, 0x3C	; 60
 1ca:	50 f7       	brcc	.-44     	; 0x1a0 <main+0x22>
 1cc:	eb cf       	rjmp	.-42     	; 0x1a4 <main+0x26>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
