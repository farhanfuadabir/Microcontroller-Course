
button_with_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000146  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000fa  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000095  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e7  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017e  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_1>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
char digit[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

volatile int number=0;
int main(void)
{
	DDRB = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(1<<PD2);
  96:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1<<PD3);
  98:	8b 98       	cbi	0x11, 3	; 17
	
	MCUCR |= (1<<ISC01) | (1<<ISC11);
  9a:	85 b7       	in	r24, 0x35	; 53
  9c:	8a 60       	ori	r24, 0x0A	; 10
  9e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1);	
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	80 6c       	ori	r24, 0xC0	; 192
  a4:	8b bf       	out	0x3b, r24	; 59
	sei();
  a6:	78 94       	sei
		{
			number=0;
		}
		if (number<0)
		{
			number=9;
  a8:	29 e0       	ldi	r18, 0x09	; 9
  aa:	30 e0       	ldi	r19, 0x00	; 0
	MCUCR |= (1<<ISC01) | (1<<ISC11);
	GICR |= (1<<INT0) | (1<<INT1);	
	sei();
	while(1)
	{
		if(number>9)
  ac:	80 91 6a 00 	lds	r24, 0x006A
  b0:	90 91 6b 00 	lds	r25, 0x006B
  b4:	0a 97       	sbiw	r24, 0x0a	; 10
  b6:	24 f0       	brlt	.+8      	; 0xc0 <main+0x2e>
		{
			number=0;
  b8:	10 92 6b 00 	sts	0x006B, r1
  bc:	10 92 6a 00 	sts	0x006A, r1
		}
		if (number<0)
  c0:	80 91 6a 00 	lds	r24, 0x006A
  c4:	90 91 6b 00 	lds	r25, 0x006B
  c8:	99 23       	and	r25, r25
  ca:	24 f4       	brge	.+8      	; 0xd4 <main+0x42>
		{
			number=9;
  cc:	30 93 6b 00 	sts	0x006B, r19
  d0:	20 93 6a 00 	sts	0x006A, r18
		}
		PORTB=digit[number];
  d4:	e0 91 6a 00 	lds	r30, 0x006A
  d8:	f0 91 6b 00 	lds	r31, 0x006B
  dc:	e0 5a       	subi	r30, 0xA0	; 160
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	88 bb       	out	0x18, r24	; 24
	}
  e4:	e3 cf       	rjmp	.-58     	; 0xac <main+0x1a>

000000e6 <__vector_1>:
}

ISR(INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	number++;
  f4:	80 91 6a 00 	lds	r24, 0x006A
  f8:	90 91 6b 00 	lds	r25, 0x006B
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 6b 00 	sts	0x006B, r25
 102:	80 93 6a 00 	sts	0x006A, r24
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_2>:

ISR(INT1_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	number--;
 122:	80 91 6a 00 	lds	r24, 0x006A
 126:	90 91 6b 00 	lds	r25, 0x006B
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	90 93 6b 00 	sts	0x006B, r25
 130:	80 93 6a 00 	sts	0x006A, r24
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
