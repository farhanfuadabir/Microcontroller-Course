
7SegmentTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014e  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f6  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000138  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000175  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000037  00000000  00000000  000006a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	
uint8_t digit[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

int main(void)
{
    DDRB=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	while(1)
    {
        //TODO:: Please write your application code 
		for (int i=0;i<10;i++)
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
		{
 			PORTB=digit[i];
  8e:	fc 01       	movw	r30, r24
  90:	e0 5a       	subi	r30, 0xA0	; 160
  92:	ff 4f       	sbci	r31, 0xFF	; 255
  94:	20 81       	ld	r18, Z
  96:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	54 e3       	ldi	r21, 0x34	; 52
  9c:	6c e0       	ldi	r22, 0x0C	; 12
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x26>
  a8:	00 00       	nop
{
    DDRB=0xFF;
	while(1)
    {
        //TODO:: Please write your application code 
		for (int i=0;i<10;i++)
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	91 05       	cpc	r25, r1
  b0:	74 f3       	brlt	.-36     	; 0x8e <main+0xc>
  b2:	84 2f       	mov	r24, r20
  b4:	93 2f       	mov	r25, r19
  b6:	eb cf       	rjmp	.-42     	; 0x8e <main+0xc>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
