
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d2  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016c  00000000  00000000  00000469  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000178  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000056  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
    DDRA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD &= ~(1<<PD2);//input of Interrupt
  70:	8a 98       	cbi	0x11, 2	; 17
	DDRC |=(1<<PC3);//Output for led
  72:	a3 9a       	sbi	0x14, 3	; 20
	
	MCUCR |= (1<<ISC01);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	82 60       	ori	r24, 0x02	; 2
  78:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
  7a:	8b b7       	in	r24, 0x3b	; 59
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	8b bf       	out	0x3b, r24	; 59
	sei();
  80:	78 94       	sei
	
	while(1)
    {
        //TODO:: Please write your application code 
		PORTA=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	33 e2       	ldi	r19, 0x23	; 35
  8a:	94 ef       	ldi	r25, 0xF4	; 244
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
		_delay_ms(10000);
		PORTA=0x00;
  98:	1b ba       	out	0x1b, r1	; 27
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	33 e2       	ldi	r19, 0x23	; 35
  9e:	94 ef       	ldi	r25, 0xF4	; 244
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	eb cf       	rjmp	.-42     	; 0x84 <main+0x18>

000000ae <__vector_1>:
		_delay_ms(10000);
    }
}

ISR (INT0_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	PORTA=0x00;
  be:	1b ba       	out	0x1b, r1	; 27
	PORTA=0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ec       	ldi	r24, 0xC3	; 195
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <__vector_1+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__vector_1+0x26>
  d4:	00 00       	nop
	_delay_ms(400);
	PORTA=0x00;
  d6:	1b ba       	out	0x1b, r1	; 27
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	83 ec       	ldi	r24, 0xC3	; 195
  dc:	99 e0       	ldi	r25, 0x09	; 9
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <__vector_1+0x30>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <__vector_1+0x3a>
  e8:	00 00       	nop
	_delay_ms(400);
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
