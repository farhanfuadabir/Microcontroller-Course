
7 Segment dual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022e  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010a  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015c  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019a  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
unsigned char counter = 43;


int main(void)
{
	DDRA  |= (1 << PA7) | (1 << PA6);
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA7) | (1 << PA6);
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	80 6c       	ori	r24, 0xC0	; 192
  9c:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	
	DDRD &= ~(1 << PD0);
  a2:	88 98       	cbi	0x11, 0	; 17
			
			if(counter > 99)
			counter = 0;
		}
		
		show1 = counter / 10;
  a4:	3d ec       	ldi	r19, 0xCD	; 205
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e1       	ldi	r24, 0x1F	; 31
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
	
	while(1)
	{
		_delay_ms(10);
		
		if(!(PIND & (1 << PD0)))
  b2:	80 99       	sbic	0x10, 0	; 16
  b4:	12 c0       	rjmp	.+36     	; 0xda <main+0x48>
		{
			while(!(PIND & (1 << PD0)));
  b6:	80 9b       	sbis	0x10, 0	; 16
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x24>
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x2c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x32>
  c4:	00 00       	nop
			_delay_ms(10);
			
			counter++;
  c6:	80 91 60 00 	lds	r24, 0x0060
  ca:	8f 5f       	subi	r24, 0xFF	; 255
			
			if(counter > 99)
  cc:	84 36       	cpi	r24, 0x64	; 100
  ce:	18 f4       	brcc	.+6      	; 0xd6 <main+0x44>
		if(!(PIND & (1 << PD0)))
		{
			while(!(PIND & (1 << PD0)));
			_delay_ms(10);
			
			counter++;
  d0:	80 93 60 00 	sts	0x0060, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x48>
			
			if(counter > 99)
			counter = 0;
  d6:	10 92 60 00 	sts	0x0060, r1
		}
		
		show1 = counter / 10;
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	83 9f       	mul	r24, r19
  e0:	91 2d       	mov	r25, r1
  e2:	11 24       	eor	r1, r1
  e4:	96 95       	lsr	r25
  e6:	96 95       	lsr	r25
  e8:	96 95       	lsr	r25
  ea:	90 93 6d 00 	sts	0x006D, r25
		show2 = counter % 10;
  ee:	99 0f       	add	r25, r25
  f0:	29 2f       	mov	r18, r25
  f2:	22 0f       	add	r18, r18
  f4:	22 0f       	add	r18, r18
  f6:	92 0f       	add	r25, r18
  f8:	89 1b       	sub	r24, r25
  fa:	80 93 6c 00 	sts	0x006C, r24
		
		//------------------------
		PORTA &= ~(1 << PA7);
  fe:	df 98       	cbi	0x1b, 7	; 27
		PORTA |= (1 << PA6);
 100:	de 9a       	sbi	0x1b, 6	; 27
		PORTB = digit[show1];
 102:	e0 91 6d 00 	lds	r30, 0x006D
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ef 59       	subi	r30, 0x9F	; 159
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	88 bb       	out	0x18, r24	; 24
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	9e e4       	ldi	r25, 0x4E	; 78
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x82>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x88>
 11a:	00 00       	nop
		_delay_ms(10);
		//------------------------
		
		//------------------------
		PORTA &= ~(1 << PA6);
 11c:	de 98       	cbi	0x1b, 6	; 27
		PORTA |= (1 << PA7);
 11e:	df 9a       	sbi	0x1b, 7	; 27
		PORTB = digit[show2];
 120:	e0 91 6c 00 	lds	r30, 0x006C
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ef 59       	subi	r30, 0x9F	; 159
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xa6>
 138:	00 00       	nop
 13a:	b5 cf       	rjmp	.-150    	; 0xa6 <main+0x14>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
