
LCD_Test_1_EEE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000344  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cd0  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000357  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004e5  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000023c  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d3  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000899  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  7a:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDMix_4Bit>:

static void LCDMix_4Bit(uint8_t data);

static void LCDMix_4Bit(uint8_t data)
{
  if((data) & (0b10000000)) 
  82:	88 23       	and	r24, r24
  84:	14 f4       	brge	.+4      	; 0x8a <LCDMix_4Bit+0x8>
  {
	  LDPD7 |= 1 << LCD_D7;
  86:	af 9a       	sbi	0x15, 7	; 21
  88:	01 c0       	rjmp	.+2      	; 0x8c <LCDMix_4Bit+0xa>
  }	  
  else
  {
	  LDPD7 &= ~(1 << LCD_D7);
  8a:	af 98       	cbi	0x15, 7	; 21
  } 

  if((data) & (0b01000000)) 
  8c:	86 ff       	sbrs	r24, 6
  8e:	02 c0       	rjmp	.+4      	; 0x94 <LCDMix_4Bit+0x12>
  {
	  LDPD6 |= 1 << LCD_D6;
  90:	ae 9a       	sbi	0x15, 6	; 21
  92:	01 c0       	rjmp	.+2      	; 0x96 <LCDMix_4Bit+0x14>
  }
  else
  {
	  LDPD6 &= ~(1 << LCD_D6);
  94:	ae 98       	cbi	0x15, 6	; 21
  }
	  
  if((data) & (0b00100000))
  96:	85 ff       	sbrs	r24, 5
  98:	02 c0       	rjmp	.+4      	; 0x9e <LCDMix_4Bit+0x1c>
  {
	  LDPD5 |= 1 << LCD_D5;
  9a:	ad 9a       	sbi	0x15, 5	; 21
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <LCDMix_4Bit+0x1e>
  }
  else
  {
	  LDPD5 &= ~(1 << LCD_D5);
  9e:	ad 98       	cbi	0x15, 5	; 21
  }
  
  if((data) & (0b00010000))
  a0:	84 ff       	sbrs	r24, 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <LCDMix_4Bit+0x26>
  {
	  LDPD4 |= 1 << LCD_D4;
  a4:	ac 9a       	sbi	0x15, 4	; 21
  a6:	08 95       	ret
  }
  else LDPD4 &= ~(1 << LCD_D4);	
  a8:	ac 98       	cbi	0x15, 4	; 21
  aa:	08 95       	ret

000000ac <LCDsendChar>:
	//-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
}

void LCDsendChar(uint8_t ch)	//Sends Char to LCD
{
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	LCDMix_4Bit(ch & 0b11110000);
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPRS |= 1 << LCD_RS;
  b6:	94 9a       	sbi	0x12, 4	; 18
	LDPE |= 1 << LCD_E;
  b8:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCDsendChar+0x12>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDsendChar+0x18>
  c4:	00 00       	nop
	_delay_ms(1);

	LDPE &= ~(1 << LCD_E);
  c6:	96 98       	cbi	0x12, 6	; 18
	LDPRS &= ~(1 << LCD_RS);
  c8:	94 98       	cbi	0x12, 4	; 18
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCDsendChar+0x22>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDsendChar+0x28>
  d4:	00 00       	nop
	_delay_ms(1);
		
	LCDMix_4Bit((ch & 0b00001111) << 4);
  d6:	8c 2f       	mov	r24, r28
  d8:	82 95       	swap	r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPRS |= 1 << LCD_RS;
  e0:	94 9a       	sbi	0x12, 4	; 18
	LDPE |= 1 << LCD_E;
  e2:	96 9a       	sbi	0x12, 6	; 18
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCDsendChar+0x3c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCDsendChar+0x42>
  ee:	00 00       	nop
	_delay_ms(1);
	
	LDPE &= ~(1 << LCD_E);
  f0:	96 98       	cbi	0x12, 6	; 18
	LDPRS &= ~(1 << LCD_RS);
  f2:	94 98       	cbi	0x12, 4	; 18
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCDsendChar+0x4c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCDsendChar+0x52>
  fe:	00 00       	nop
	_delay_ms(1);
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCDsendCommand>:

void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	LCDMix_4Bit(cmd & 0b11110000);
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPE |= 1 << LCD_E;		
 10e:	96 9a       	sbi	0x12, 6	; 18
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDsendCommand+0x10>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDsendCommand+0x16>
 11a:	00 00       	nop
	_delay_ms(1);
		
	LDPE &= ~(1 << LCD_E);
 11c:	96 98       	cbi	0x12, 6	; 18
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDsendCommand+0x1e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCDsendCommand+0x24>
 128:	00 00       	nop
	_delay_ms(1);

	LCDMix_4Bit((cmd & 0b00001111) << 4);
 12a:	8c 2f       	mov	r24, r28
 12c:	82 95       	swap	r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPE |= 1 << LCD_E;		
 134:	96 9a       	sbi	0x12, 6	; 18
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDsendCommand+0x36>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDsendCommand+0x3c>
 140:	00 00       	nop
	_delay_ms(1);
		
	LDPE &= ~(1 << LCD_E);
 142:	96 98       	cbi	0x12, 6	; 18
 144:	8f ec       	ldi	r24, 0xCF	; 207
 146:	97 e0       	ldi	r25, 0x07	; 7
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDsendCommand+0x44>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDsendCommand+0x4a>
 14e:	00 00       	nop
	_delay_ms(1);
}	
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <LCDinit>:
 154:	8f e2       	ldi	r24, 0x2F	; 47
 156:	95 e7       	ldi	r25, 0x75	; 117
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDinit+0x4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCDinit+0xa>
 15e:	00 00       	nop
void LCDinit(void)	//Initializes LCD 
{
	_delay_ms(15);
		
	//zero to data pins
	LCDMix_4Bit(0b00000000);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>

	//zero to control pins
	LDPRS &= ~(1 << LCD_RS);
 166:	94 98       	cbi	0x12, 4	; 18
	LDPRW &= ~(1 << LCD_RW);
 168:	95 98       	cbi	0x12, 5	; 18
	LDPE &= ~(1 << LCD_E);
 16a:	96 98       	cbi	0x12, 6	; 18
	
	//set data direction
	LDDD4 |= 1 << LCD_D4;
 16c:	a4 9a       	sbi	0x14, 4	; 20
	LDDD5 |= 1 << LCD_D5;
 16e:	a5 9a       	sbi	0x14, 5	; 20
	LDDD6 |= 1 << LCD_D6;
 170:	a6 9a       	sbi	0x14, 6	; 20
	LDDD7 |= 1 << LCD_D7;
 172:	a7 9a       	sbi	0x14, 7	; 20
		
	//control direction pins
	LDDRS |= 1 << LCD_RS;
 174:	8c 9a       	sbi	0x11, 4	; 17
	LDDRW |= 1 << LCD_RW;
 176:	8d 9a       	sbi	0x11, 5	; 17
	LDDE |= 1 << LCD_E;
 178:	8e 9a       	sbi	0x11, 6	; 17
	
	//---------one------
	LCDMix_4Bit(0b00110000);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPE |= 1 << LCD_E;
 180:	96 9a       	sbi	0x12, 6	; 18
 182:	8f ec       	ldi	r24, 0xCF	; 207
 184:	97 e0       	ldi	r25, 0x07	; 7
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDinit+0x32>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCDinit+0x38>
 18c:	00 00       	nop
	_delay_ms(1);
	
	LDPE &= ~(1 << LCD_E);
 18e:	96 98       	cbi	0x12, 6	; 18
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDinit+0x40>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCDinit+0x46>
 19a:	00 00       	nop
	_delay_ms(1);
		
	//-----------two-----------
	LCDMix_4Bit(0b00110000);
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPE |= 1 << LCD_E;
 1a2:	96 9a       	sbi	0x12, 6	; 18
 1a4:	8f ec       	ldi	r24, 0xCF	; 207
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDinit+0x54>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCDinit+0x5a>
 1ae:	00 00       	nop
	_delay_ms(1);
	
	LDPE &= ~(1 << LCD_E);
 1b0:	96 98       	cbi	0x12, 6	; 18
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDinit+0x62>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCDinit+0x68>
 1bc:	00 00       	nop
	_delay_ms(1);
	
	//-------three-------------
	LCDMix_4Bit(0b00100000);
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <LCDMix_4Bit>
	LDPE |= 1 << LCD_E;		
 1c4:	96 9a       	sbi	0x12, 6	; 18
 1c6:	8f ec       	ldi	r24, 0xCF	; 207
 1c8:	97 e0       	ldi	r25, 0x07	; 7
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDinit+0x76>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCDinit+0x7c>
 1d0:	00 00       	nop
	_delay_ms(1);
		
	LDPE &= ~(1 << LCD_E);
 1d2:	96 98       	cbi	0x12, 6	; 18
 1d4:	8f ec       	ldi	r24, 0xCF	; 207
 1d6:	97 e0       	ldi	r25, 0x07	; 7
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDinit+0x84>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCDinit+0x8a>
 1de:	00 00       	nop
	_delay_ms(1);
		
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
	
	//-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
 1ec:	08 95       	ret

000001ee <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;		//remap lines into proper order
	
	switch(y)
 1ee:	62 30       	cpi	r22, 0x02	; 2
 1f0:	31 f0       	breq	.+12     	; 0x1fe <LCDGotoXY+0x10>
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	31 f0       	breq	.+12     	; 0x202 <LCDGotoXY+0x14>
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	29 f4       	brne	.+10     	; 0x204 <LCDGotoXY+0x16>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR + x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR + x; break;
 1fa:	80 5c       	subi	r24, 0xC0	; 192
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <LCDGotoXY+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR + x; break;
 1fe:	8c 5e       	subi	r24, 0xEC	; 236
 200:	01 c0       	rjmp	.+2      	; 0x204 <LCDGotoXY+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR + x; break;
 202:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR + x;
	}
	
	LCDsendCommand(1 << LCD_DDRAM | DDRAMAddr);	//set data address
 204:	80 68       	ori	r24, 0x80	; 128
 206:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
 20a:	08 95       	ret

0000020c <LCDWriteInt>:
	}
}


void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <LCDWriteInt+0xe>
 21a:	00 d0       	rcall	.+0      	; 0x21c <LCDWriteInt+0x10>
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	7b 01       	movw	r14, r22
	char str[5] = {0, 0, 0, 0, 0};
 224:	fe 01       	movw	r30, r28
 226:	31 96       	adiw	r30, 0x01	; 1
 228:	25 e0       	ldi	r18, 0x05	; 5
 22a:	df 01       	movw	r26, r30
 22c:	1d 92       	st	X+, r1
 22e:	2a 95       	dec	r18
 230:	e9 f7       	brne	.-6      	; 0x22c <LCDWriteInt+0x20>
	int i = 4;
	
	while(val)
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	59 f0       	breq	.+22     	; 0x24c <LCDWriteInt+0x40>
 236:	35 96       	adiw	r30, 0x05	; 5
	{
		str[i] = val % 10;
 238:	2a e0       	ldi	r18, 0x0A	; 10
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__divmodhi4>
 242:	82 93       	st	-Z, r24
		val = val / 10;
 244:	86 2f       	mov	r24, r22
 246:	97 2f       	mov	r25, r23
void LCDWriteInt(int val, unsigned int field_length)  ///////////////////
{
	char str[5] = {0, 0, 0, 0, 0};
	int i = 4;
	
	while(val)
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	c1 f7       	brne	.-16     	; 0x23c <LCDWriteInt+0x30>
		str[i] = val % 10;
		val = val / 10;
		i--;
	}
	
	for(i = (5 - field_length); i < 5; i++)
 24c:	05 e0       	ldi	r16, 0x05	; 5
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	0e 19       	sub	r16, r14
 252:	1f 09       	sbc	r17, r15
 254:	05 30       	cpi	r16, 0x05	; 5
 256:	11 05       	cpc	r17, r1
 258:	9c f4       	brge	.+38     	; 0x280 <LCDWriteInt+0x74>
 25a:	e1 e0       	ldi	r30, 0x01	; 1
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ec 0f       	add	r30, r28
 260:	fd 1f       	adc	r31, r29
 262:	0e 0f       	add	r16, r30
 264:	1f 1f       	adc	r17, r31
 266:	7e 01       	movw	r14, r28
 268:	f6 e0       	ldi	r31, 0x06	; 6
 26a:	ef 0e       	add	r14, r31
 26c:	f1 1c       	adc	r15, r1
	{
		LCDsendChar(48 + str[i]);
 26e:	d8 01       	movw	r26, r16
 270:	8d 91       	ld	r24, X+
 272:	8d 01       	movw	r16, r26
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	0e 94 56 00 	call	0xac	; 0xac <LCDsendChar>
		str[i] = val % 10;
		val = val / 10;
		i--;
	}
	
	for(i = (5 - field_length); i < 5; i++)
 27a:	0e 15       	cp	r16, r14
 27c:	1f 05       	cpc	r17, r15
 27e:	b9 f7       	brne	.-18     	; 0x26e <LCDWriteInt+0x62>
	{
		LCDsendChar(48 + str[i]);
	}	
}
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	08 95       	ret

00000298 <LCDWriteString>:

void LCDWriteString(const char *msg)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
	/*****************************************************************	
	This function Writes a given string to lcd at the current cursor location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg!='\0')
 29e:	88 81       	ld	r24, Y
 2a0:	88 23       	and	r24, r24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <LCDWriteString+0x18>
 2a4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCDsendChar(*msg);
 2a6:	0e 94 56 00 	call	0xac	; 0xac <LCDsendChar>
	/*****************************************************************	
	This function Writes a given string to lcd at the current cursor location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg!='\0')
 2aa:	89 91       	ld	r24, Y+
 2ac:	81 11       	cpse	r24, r1
 2ae:	fb cf       	rjmp	.-10     	; 0x2a6 <LCDWriteString+0xe>
	{
		LCDsendChar(*msg);
		msg++;
	}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <main>:
#include "lcd_lib.h"
int i=12;

int main(void)
{
    LCDinit();
 2b6:	0e 94 aa 00 	call	0x154	; 0x154 <LCDinit>
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x8>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0xe>
 2c4:	00 00       	nop
	_delay_ms(10);
	while(1)
    {
        //TODO:: Please write your application code
		 LCDWriteStringXY(0,1,"Techshop BD");
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCDGotoXY>
 2ce:	82 e6       	ldi	r24, 0x62	; 98
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 4c 01 	call	0x298	; 0x298 <LCDWriteString>
		 LCDWriteIntXY(0,0,i,3);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCDGotoXY>
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 91 60 00 	lds	r24, 0x0060
 2e6:	90 91 61 00 	lds	r25, 0x0061
 2ea:	0e 94 06 01 	call	0x20c	; 0x20c <LCDWriteInt>
 2ee:	eb cf       	rjmp	.-42     	; 0x2c6 <main+0x10>

000002f0 <__divmodhi4>:
 2f0:	97 fb       	bst	r25, 7
 2f2:	07 2e       	mov	r0, r23
 2f4:	16 f4       	brtc	.+4      	; 0x2fa <__divmodhi4+0xa>
 2f6:	00 94       	com	r0
 2f8:	07 d0       	rcall	.+14     	; 0x308 <__divmodhi4_neg1>
 2fa:	77 fd       	sbrc	r23, 7
 2fc:	09 d0       	rcall	.+18     	; 0x310 <__divmodhi4_neg2>
 2fe:	0e 94 8c 01 	call	0x318	; 0x318 <__udivmodhi4>
 302:	07 fc       	sbrc	r0, 7
 304:	05 d0       	rcall	.+10     	; 0x310 <__divmodhi4_neg2>
 306:	3e f4       	brtc	.+14     	; 0x316 <__divmodhi4_exit>

00000308 <__divmodhi4_neg1>:
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__divmodhi4_neg2>:
 310:	70 95       	com	r23
 312:	61 95       	neg	r22
 314:	7f 4f       	sbci	r23, 0xFF	; 255

00000316 <__divmodhi4_exit>:
 316:	08 95       	ret

00000318 <__udivmodhi4>:
 318:	aa 1b       	sub	r26, r26
 31a:	bb 1b       	sub	r27, r27
 31c:	51 e1       	ldi	r21, 0x11	; 17
 31e:	07 c0       	rjmp	.+14     	; 0x32e <__udivmodhi4_ep>

00000320 <__udivmodhi4_loop>:
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	a6 17       	cp	r26, r22
 326:	b7 07       	cpc	r27, r23
 328:	10 f0       	brcs	.+4      	; 0x32e <__udivmodhi4_ep>
 32a:	a6 1b       	sub	r26, r22
 32c:	b7 0b       	sbc	r27, r23

0000032e <__udivmodhi4_ep>:
 32e:	88 1f       	adc	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	5a 95       	dec	r21
 334:	a9 f7       	brne	.-22     	; 0x320 <__udivmodhi4_loop>
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	bc 01       	movw	r22, r24
 33c:	cd 01       	movw	r24, r26
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
