
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001ae  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ca  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000083  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d7  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000006c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000092  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


volatile int number=0;
int main(void)
{
	DDRB = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(1<<PD2);
  80:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1<<PD3);
  82:	8b 98       	cbi	0x11, 3	; 17
	
	MCUCR |= (1<<ISC01) | (1<<ISC11);
  84:	85 b7       	in	r24, 0x35	; 53
  86:	8a 60       	ori	r24, 0x0A	; 10
  88:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1);	
  8a:	8b b7       	in	r24, 0x3b	; 59
  8c:	80 6c       	ori	r24, 0xC0	; 192
  8e:	8b bf       	out	0x3b, r24	; 59
	
	DDRB  |= 1 << PB3; //PWM pin as Output
  90:	bb 9a       	sbi	0x17, 3	; 23
	OCR0   = 0;
  92:	1c be       	out	0x3c, r1	; 60
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << WGM01) | (1 << CS01); //Fast PWM, Non-inverting mode, prescaling 8
  94:	83 b7       	in	r24, 0x33	; 51
  96:	8a 66       	ori	r24, 0x6A	; 106
  98:	83 bf       	out	0x33, r24	; 51
	sei();
  9a:	78 94       	sei
	while(1)
	{
		if(number>255)
		{
			number=255;
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	30 e0       	ldi	r19, 0x00	; 0
	OCR0   = 0;
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << WGM01) | (1 << CS01); //Fast PWM, Non-inverting mode, prescaling 8
	sei();
	while(1)
	{
		if(number>255)
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	91 05       	cpc	r25, r1
  ac:	29 f0       	breq	.+10     	; 0xb8 <main+0x3c>
  ae:	24 f0       	brlt	.+8      	; 0xb8 <main+0x3c>
		{
			number=255;
  b0:	30 93 61 00 	sts	0x0061, r19
  b4:	20 93 60 00 	sts	0x0060, r18
		}
		if (number<1)
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	90 91 61 00 	lds	r25, 0x0061
  c0:	18 16       	cp	r1, r24
  c2:	19 06       	cpc	r1, r25
  c4:	24 f0       	brlt	.+8      	; 0xce <main+0x52>
		{
			number=0;
  c6:	10 92 61 00 	sts	0x0061, r1
  ca:	10 92 60 00 	sts	0x0060, r1
		}
		OCR0=number;
  ce:	80 91 60 00 	lds	r24, 0x0060
  d2:	90 91 61 00 	lds	r25, 0x0061
  d6:	8c bf       	out	0x3c, r24	; 60
	}
  d8:	e3 cf       	rjmp	.-58     	; 0xa0 <main+0x24>

000000da <__vector_1>:
}

ISR(INT0_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	number+=10;
  e8:	80 91 60 00 	lds	r24, 0x0060
  ec:	90 91 61 00 	lds	r25, 0x0061
  f0:	0a 96       	adiw	r24, 0x0a	; 10
  f2:	90 93 61 00 	sts	0x0061, r25
  f6:	80 93 60 00 	sts	0x0060, r24
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_2>:

ISR(INT1_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	number-=10;
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	90 91 61 00 	lds	r25, 0x0061
 11e:	0a 97       	sbiw	r24, 0x0a	; 10
 120:	90 93 61 00 	sts	0x0061, r25
 124:	80 93 60 00 	sts	0x0060, r24
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
