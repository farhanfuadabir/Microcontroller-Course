
LCD Dispaly.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  000003a4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008c1  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000426  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f3  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000017c  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a4  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000054e  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  74:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  7c:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  7e:	00 c0       	rjmp	.+0      	; 0x80 <toggle_e+0x4>
    lcd_e_low();
  80:	96 98       	cbi	0x12, 6	; 18
  82:	08 95       	ret

00000084 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  88:	66 23       	and	r22, r22
  8a:	11 f0       	breq	.+4      	; 0x90 <lcd_write+0xc>
       lcd_rs_high();
  8c:	94 9a       	sbi	0x12, 4	; 18
  8e:	01 c0       	rjmp	.+2      	; 0x92 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  90:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
  92:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  94:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  96:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  98:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  9a:	a7 9a       	sbi	0x14, 7	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  9c:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  9e:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  a0:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  a2:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  a4:	cc 23       	and	r28, r28
  a6:	0c f4       	brge	.+2      	; 0xaa <lcd_write+0x26>
  a8:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  aa:	c6 fd       	sbrc	r28, 6
  ac:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ae:	c5 fd       	sbrc	r28, 5
  b0:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  b2:	c4 fd       	sbrc	r28, 4
  b4:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  ba:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  bc:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  be:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  c0:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  c2:	c3 fd       	sbrc	r28, 3
  c4:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  c6:	c2 fd       	sbrc	r28, 2
  c8:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ca:	c1 fd       	sbrc	r28, 1
  cc:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  ce:	c0 fd       	sbrc	r28, 0
  d0:	ac 9a       	sbi	0x15, 4	; 21
        lcd_e_toggle();        
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  d6:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d8:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  da:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  dc:	af 9a       	sbi	0x15, 7	; 21
    }
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  e2:	88 23       	and	r24, r24
  e4:	11 f0       	breq	.+4      	; 0xea <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  e6:	94 9a       	sbi	0x12, 4	; 18
  e8:	01 c0       	rjmp	.+2      	; 0xec <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  ea:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  ec:	95 9a       	sbi	0x12, 5	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  ee:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  f0:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  f2:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  f4:	a7 98       	cbi	0x14, 7	; 20
                
        /* read high nibble first */
        lcd_e_high();
  f6:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  fa:	9c 99       	sbic	0x13, 4	; 19
  fc:	02 c0       	rjmp	.+4      	; 0x102 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 102:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 104:	9d 99       	sbic	0x13, 5	; 19
 106:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 108:	9e 99       	sbic	0x13, 6	; 19
 10a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 10c:	9f 99       	sbic	0x13, 7	; 19
 10e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 110:	96 98       	cbi	0x12, 6	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 114:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 118:	9c 99       	sbic	0x13, 4	; 19
 11a:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 11c:	9d 99       	sbic	0x13, 5	; 19
 11e:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 120:	9e 99       	sbic	0x13, 6	; 19
 122:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 124:	9f 99       	sbic	0x13, 7	; 19
 126:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 128:	96 98       	cbi	0x12, 6	; 18
    }
    return data;
}
 12a:	08 95       	ret

0000012c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_read>
 132:	88 23       	and	r24, r24
 134:	dc f3       	brlt	.-10     	; 0x12c <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_read>
    
}/* lcd_waitbusy */
 13e:	08 95       	ret

00000140 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 144:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_waitbusy>
    lcd_write(cmd,0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 42 00 	call	0x84	; 0x84 <lcd_write>
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 154:	61 11       	cpse	r22, r1
 156:	04 c0       	rjmp	.+8      	; 0x160 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 15e:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 160:	80 54       	subi	r24, 0x40	; 64
 162:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 166:	08 95       	ret

00000168 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 16e:	08 95       	ret

00000170 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 174:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_waitbusy>
    if (c=='\n')
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	49 f4       	brne	.+18     	; 0x18e <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	10 f4       	brcc	.+4      	; 0x184 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 184:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 186:	80 58       	subi	r24, 0x80	; 128
 188:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 42 00 	call	0x84	; 0x84 <lcd_write>
    }

}/* lcd_putc */
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 19e:	ec 01       	movw	r28, r24
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <lcd_puts+0x1a>
        lcd_putc(c);
 1aa:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1ae:	89 91       	ld	r24, Y+
 1b0:	81 11       	cpse	r24, r1
 1b2:	fb cf       	rjmp	.-10     	; 0x1aa <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1be:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1c0:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1c2:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1c4:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1c6:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1c8:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ca:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	e0 ea       	ldi	r30, 0xA0	; 160
 1ce:	ff e0       	ldi	r31, 0x0F	; 15
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1d4:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d6:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 1d8:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	e0 ee       	ldi	r30, 0xE0	; 224
 1de:	f4 e0       	ldi	r31, 0x04	; 4
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e4:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e8:	e0 e1       	ldi	r30, 0x10	; 16
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f0:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f4:	e0 e1       	ldi	r30, 0x10	; 16
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fc:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 1fe:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 202:	e0 e1       	ldi	r30, 0x10	; 16
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 210:	88 e0       	ldi	r24, 0x08	; 8
 212:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 216:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>

}/* lcd_init */
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <__vector_11>:
char buffer[7];
volatile int count = 0;
volatile int second = 0;

ISR(TIMER0_OVF_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	count++;
 238:	80 91 62 00 	lds	r24, 0x0062
 23c:	90 91 63 00 	lds	r25, 0x0063
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 63 00 	sts	0x0063, r25
 246:	80 93 62 00 	sts	0x0062, r24
	if(count >= 4 ) 
 24a:	80 91 62 00 	lds	r24, 0x0062
 24e:	90 91 63 00 	lds	r25, 0x0063
 252:	04 97       	sbiw	r24, 0x04	; 4
 254:	6c f0       	brlt	.+26     	; 0x270 <__vector_11+0x46>
	{
		second++;
 256:	80 91 60 00 	lds	r24, 0x0060
 25a:	90 91 61 00 	lds	r25, 0x0061
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 61 00 	sts	0x0061, r25
 264:	80 93 60 00 	sts	0x0060, r24
		count = 0;
 268:	10 92 63 00 	sts	0x0063, r1
 26c:	10 92 62 00 	sts	0x0062, r1
	}
}
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <main>:

int main(void)
{
	lcd_init(LCD_DISP_ON);
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_init>
	
	TCCR0 |= (1<<CS00) | (1<<CS02);		// prescaler 1024
 284:	83 b7       	in	r24, 0x33	; 51
 286:	85 60       	ori	r24, 0x05	; 5
 288:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);				// overflow interrupt enable
 28a:	89 b7       	in	r24, 0x39	; 57
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	89 bf       	out	0x39, r24	; 57
	sei();								// enable global interrupt			
 290:	78 94       	sei
	
	while(1)
    {
		itoa(second, buffer, 10);
 292:	80 91 60 00 	lds	r24, 0x0060
 296:	90 91 61 00 	lds	r25, 0x0061
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29a:	4a e0       	ldi	r20, 0x0A	; 10
 29c:	64 e6       	ldi	r22, 0x64	; 100
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__itoa_ncheck>
		lcd_gotoxy(0,0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
		lcd_puts(buffer);
 2ac:	84 e6       	ldi	r24, 0x64	; 100
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x3a>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x40>
 2be:	00 00       	nop
 2c0:	e8 cf       	rjmp	.-48     	; 0x292 <main+0x14>

000002c2 <__itoa_ncheck>:
 2c2:	bb 27       	eor	r27, r27
 2c4:	4a 30       	cpi	r20, 0x0A	; 10
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <__itoa_ncheck+0x12>
 2c8:	99 23       	and	r25, r25
 2ca:	22 f4       	brpl	.+8      	; 0x2d4 <__itoa_ncheck+0x12>
 2cc:	bd e2       	ldi	r27, 0x2D	; 45
 2ce:	90 95       	com	r25
 2d0:	81 95       	neg	r24
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__utoa_common>

000002d8 <__utoa_ncheck>:
 2d8:	bb 27       	eor	r27, r27

000002da <__utoa_common>:
 2da:	fb 01       	movw	r30, r22
 2dc:	55 27       	eor	r21, r21
 2de:	aa 27       	eor	r26, r26
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	a4 17       	cp	r26, r20
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <__utoa_common+0x14>
 2ea:	a4 1b       	sub	r26, r20
 2ec:	83 95       	inc	r24
 2ee:	50 51       	subi	r21, 0x10	; 16
 2f0:	b9 f7       	brne	.-18     	; 0x2e0 <__utoa_common+0x6>
 2f2:	a0 5d       	subi	r26, 0xD0	; 208
 2f4:	aa 33       	cpi	r26, 0x3A	; 58
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <__utoa_common+0x20>
 2f8:	a9 5d       	subi	r26, 0xD9	; 217
 2fa:	a1 93       	st	Z+, r26
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	79 f7       	brne	.-34     	; 0x2de <__utoa_common+0x4>
 300:	b1 11       	cpse	r27, r1
 302:	b1 93       	st	Z+, r27
 304:	11 92       	st	Z+, r1
 306:	cb 01       	movw	r24, r22
 308:	0c 94 86 01 	jmp	0x30c	; 0x30c <strrev>

0000030c <strrev>:
 30c:	dc 01       	movw	r26, r24
 30e:	fc 01       	movw	r30, r24
 310:	67 2f       	mov	r22, r23
 312:	71 91       	ld	r23, Z+
 314:	77 23       	and	r23, r23
 316:	e1 f7       	brne	.-8      	; 0x310 <strrev+0x4>
 318:	32 97       	sbiw	r30, 0x02	; 2
 31a:	04 c0       	rjmp	.+8      	; 0x324 <strrev+0x18>
 31c:	7c 91       	ld	r23, X
 31e:	6d 93       	st	X+, r22
 320:	70 83       	st	Z, r23
 322:	62 91       	ld	r22, -Z
 324:	ae 17       	cp	r26, r30
 326:	bf 07       	cpc	r27, r31
 328:	c8 f3       	brcs	.-14     	; 0x31c <strrev+0x10>
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
