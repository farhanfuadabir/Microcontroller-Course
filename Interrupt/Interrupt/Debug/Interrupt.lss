
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018a  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000164  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015d  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d5  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
	PORTC = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	85 bb       	out	0x15, r24	; 21
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	90 e0       	ldi	r25, 0x00	; 0
	for(int i =0; i<8; i++)
	{
	PORTC = ~PORTC;
  88:	25 b3       	in	r18, 0x15	; 21
  8a:	20 95       	com	r18
  8c:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	30 e7       	ldi	r19, 0x70	; 112
  92:	42 e0       	ldi	r20, 0x02	; 2
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <__vector_1+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__vector_1+0x32>
  9e:	00 00       	nop
  a0:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/interrupt.h>

ISR(INT0_vect)
{
	PORTC = 0xFF;
	for(int i =0; i<8; i++)
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	89 f7       	brne	.-30     	; 0x88 <__vector_1+0x1c>
	PORTC = ~PORTC;
	_delay_ms(100);
}
	

}
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	4f 91       	pop	r20
  ac:	3f 91       	pop	r19
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:

int main(void)
{
	
	DDRC = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
  be:	85 bb       	out	0x15, r24	; 21
	
	GICR |= (1<<INT0); // enable interrupt0 
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) | (1<<ISC01); // select rising edge
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bf       	out	0x35, r24	; 53
	sei(); // enable global interrupt
  cc:	78 94       	sei
	
    while(1)
    {
		for(int i =0; i<8; i++)
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC = (1<<i);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
	MCUCR |= (1<<ISC00) | (1<<ISC01); // select rising edge
	sei(); // enable global interrupt
	
    while(1)
    {
		for(int i =0; i<8; i++)
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	60 e0       	ldi	r22, 0x00	; 0
		{
			PORTC = (1<<i);
  da:	9a 01       	movw	r18, r20
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x2a>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x26>
  e8:	25 bb       	out	0x15, r18	; 21
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	30 e7       	ldi	r19, 0x70	; 112
  ee:	e2 e0       	ldi	r30, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	e0 40       	sbci	r30, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x36>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x40>
  fa:	00 00       	nop
	MCUCR |= (1<<ISC00) | (1<<ISC01); // select rising edge
	sei(); // enable global interrupt
	
    while(1)
    {
		for(int i =0; i<8; i++)
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	91 05       	cpc	r25, r1
 102:	5c f3       	brlt	.-42     	; 0xda <main+0x20>
 104:	87 2f       	mov	r24, r23
 106:	96 2f       	mov	r25, r22
 108:	e8 cf       	rjmp	.-48     	; 0xda <main+0x20>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
